-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.3
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hlsDPI_ethernetDetection is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inData_TVALID : IN STD_LOGIC;
    inData_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    inData_TREADY : OUT STD_LOGIC;
    inData_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    inData_TUSER : IN STD_LOGIC_VECTOR (127 downto 0);
    inData_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    parser2dpi_V_data_V_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    parser2dpi_V_data_V_full_n : IN STD_LOGIC;
    parser2dpi_V_data_V_write : OUT STD_LOGIC;
    parser2dpi_V_strb_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    parser2dpi_V_strb_V_full_n : IN STD_LOGIC;
    parser2dpi_V_strb_V_write : OUT STD_LOGIC;
    parser2dpi_V_user_V_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    parser2dpi_V_user_V_full_n : IN STD_LOGIC;
    parser2dpi_V_user_V_write : OUT STD_LOGIC;
    parser2dpi_V_last_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    parser2dpi_V_last_V_full_n : IN STD_LOGIC;
    parser2dpi_V_last_V_write : OUT STD_LOGIC );
end;


architecture behav of hlsDPI_ethernetDetection is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm0_0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_ST_st2_fsm1_1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_ST_st0_fsm1_0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv16_800 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm0 : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm0_0 : STD_LOGIC;
    signal ap_sig_bdd_23 : BOOLEAN;
    signal ap_CS_fsm1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding of ap_CS_fsm1 : signal is "none";
    signal ap_sig_cseq_ST_st0_fsm1_0 : STD_LOGIC;
    signal ap_sig_bdd_34 : BOOLEAN;
    signal dpiDetectState_load_load_fu_163_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_nbreadreq_fu_76_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_63 : BOOLEAN;
    signal parser2dpi_V_data_V1_status : STD_LOGIC;
    signal dpiDetectState_load_reg_252 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_reg_276 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_280 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_288 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_292 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_296 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_102 : BOOLEAN;
    signal ap_sig_cseq_ST_st2_fsm1_1 : STD_LOGIC;
    signal ap_sig_bdd_108 : BOOLEAN;
    signal dpiDetectState : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dmp_prevWord_data_V : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal dmp_prevWord_strb_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal dmp_prevWord_user_V : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal dmp_prevWord_last_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal dmp_macType_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal tmp_data_V_3_reg_256 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_strb_V_3_reg_261 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_3_reg_266 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_last_V_3_reg_271 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_135_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal parser2dpi_V_data_V1_update : STD_LOGIC;
    signal p_Result_s_fu_220_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_6_fu_210_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_4_fu_200_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_bdd_197 : BOOLEAN;
    signal ap_sig_bdd_52 : BOOLEAN;
    signal ap_sig_bdd_56 : BOOLEAN;
    signal ap_sig_bdd_115 : BOOLEAN;


begin




    -- the current state (ap_CS_fsm0) of the state machine. --
    ap_CS_fsm0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm0 <= ap_ST_st1_fsm0_0;
            else
                ap_CS_fsm0 <= ap_NS_fsm0;
            end if;
        end if;
    end process;


    -- the current state (ap_CS_fsm1) of the state machine. --
    ap_CS_fsm1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm1 <= ap_ST_st0_fsm1_0;
            else
                ap_CS_fsm1 <= ap_NS_fsm1;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_102)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- dpiDetectState assign process. --
    dpiDetectState_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_115) then
                if (ap_sig_bdd_56) then 
                    dpiDetectState <= ap_const_lv2_1;
                elsif (ap_sig_bdd_52) then 
                    dpiDetectState <= ap_const_lv2_2;
                elsif (ap_sig_bdd_197) then 
                    dpiDetectState <= ap_const_lv2_3;
                elsif ((dpiDetectState_load_load_fu_163_p1 = ap_const_lv2_3)) then 
                    dpiDetectState <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not((grp_nbreadreq_fu_76_p6 = ap_const_lv1_0)) and (dpiDetectState = ap_const_lv2_1) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_63 or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))))) then
                dmp_macType_V <= p_Result_s_fu_220_p3;
                tmp_7_reg_296 <= tmp_7_fu_234_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and (dpiDetectState = ap_const_lv2_2) and not((grp_nbreadreq_fu_76_p6 = ap_const_lv1_0)) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_63 or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1))))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not((grp_nbreadreq_fu_76_p6 = ap_const_lv1_0)) and (dpiDetectState = ap_const_lv2_1) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_63 or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1))))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not((grp_nbreadreq_fu_76_p6 = ap_const_lv1_0)) and (dpiDetectState = ap_const_lv2_0) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_63 or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1))))))) then
                dmp_prevWord_data_V <= inData_TDATA;
                dmp_prevWord_last_V <= inData_TLAST;
                dmp_prevWord_strb_V <= inData_TSTRB;
                dmp_prevWord_user_V <= inData_TUSER;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_63 or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))))) then
                dpiDetectState_load_reg_252 <= dpiDetectState;
                tmp_data_V_3_reg_256 <= dmp_prevWord_data_V;
                tmp_last_V_3_reg_271 <= dmp_prevWord_last_V;
                tmp_strb_V_3_reg_261 <= dmp_prevWord_strb_V;
                tmp_user_V_3_reg_266 <= dmp_prevWord_user_V;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and (dpiDetectState = ap_const_lv2_1) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_63 or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))))) then
                tmp_1_reg_292 <= grp_nbreadreq_fu_76_p6;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and (dpiDetectState = ap_const_lv2_2) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_63 or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))))) then
                tmp_2_reg_280 <= grp_nbreadreq_fu_76_p6;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_63 or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))) and (dpiDetectState_load_load_fu_163_p1 = ap_const_lv2_3))) then
                tmp_4_reg_276 <= grp_fu_118_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and (dpiDetectState = ap_const_lv2_2) and not((grp_nbreadreq_fu_76_p6 = ap_const_lv1_0)) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_63 or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))))) then
                tmp_9_reg_288 <= grp_fu_118_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm1) of the state machine. --
    ap_NS_fsm1_assign_proc : process (ap_done_reg, ap_sig_cseq_ST_st1_fsm0_0, ap_CS_fsm1, ap_sig_bdd_63, ap_sig_bdd_102, ap_sig_cseq_ST_st2_fsm1_1)
    begin
        case ap_CS_fsm1 is
            when ap_ST_st2_fsm1_1 => 
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_102)) and not(ap_sig_bdd_63))) then
                    ap_NS_fsm1 <= ap_ST_st2_fsm1_1;
                elsif ((not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_102)) and (not((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and ap_sig_bdd_63)))) then
                    ap_NS_fsm1 <= ap_ST_st0_fsm1_0;
                else
                    ap_NS_fsm1 <= ap_ST_st2_fsm1_1;
                end if;
            when ap_ST_st0_fsm1_0 => 
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_63 or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))))) then
                    ap_NS_fsm1 <= ap_ST_st2_fsm1_1;
                else
                    ap_NS_fsm1 <= ap_ST_st0_fsm1_0;
                end if;
            when others =>  
                ap_NS_fsm1 <= "XX";
        end case;
    end process;

    -- the next state (ap_NS_fsm0) of the state machine. --
    ap_NS_fsm0_assign_proc : process (ap_done_reg, ap_CS_fsm0, ap_sig_bdd_63, ap_sig_bdd_102, ap_sig_cseq_ST_st2_fsm1_1)
    begin
        case ap_CS_fsm0 is
            when ap_ST_st1_fsm0_0 => 
                ap_NS_fsm0 <= ap_ST_st1_fsm0_0;
            when others =>  
                ap_NS_fsm0 <= "X";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_bdd_102, ap_sig_cseq_ST_st2_fsm1_1)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_102))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm0_0, ap_sig_cseq_ST_st0_fsm1_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and (ap_const_logic_1 = ap_sig_cseq_ST_st0_fsm1_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st1_fsm0_0, ap_sig_bdd_63, ap_sig_bdd_102, ap_sig_cseq_ST_st2_fsm1_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_63 or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_102 assign process. --
    ap_sig_bdd_102_assign_proc : process(parser2dpi_V_data_V1_status, dpiDetectState_load_reg_252, tmp_4_reg_276, tmp_2_reg_280, tmp_9_reg_288, tmp_1_reg_292, tmp_7_reg_296)
    begin
                ap_sig_bdd_102 <= (((parser2dpi_V_data_V1_status = ap_const_logic_0) and (dpiDetectState_load_reg_252 = ap_const_lv2_3) and not((ap_const_lv1_0 = tmp_4_reg_276))) or ((parser2dpi_V_data_V1_status = ap_const_logic_0) and (ap_const_lv2_2 = dpiDetectState_load_reg_252) and not((ap_const_lv1_0 = tmp_2_reg_280)) and not((ap_const_lv1_0 = tmp_9_reg_288))) or ((parser2dpi_V_data_V1_status = ap_const_logic_0) and (ap_const_lv2_1 = dpiDetectState_load_reg_252) and not((ap_const_lv1_0 = tmp_1_reg_292)) and not((ap_const_lv1_0 = tmp_7_reg_296))));
    end process;


    -- ap_sig_bdd_108 assign process. --
    ap_sig_bdd_108_assign_proc : process(ap_CS_fsm1)
    begin
                ap_sig_bdd_108 <= (ap_const_lv1_1 = ap_CS_fsm1(1 downto 1));
    end process;


    -- ap_sig_bdd_115 assign process. --
    ap_sig_bdd_115_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st1_fsm0_0, ap_sig_bdd_63, ap_sig_bdd_102, ap_sig_cseq_ST_st2_fsm1_1)
    begin
                ap_sig_bdd_115 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_63 or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))));
    end process;


    -- ap_sig_bdd_197 assign process. --
    ap_sig_bdd_197_assign_proc : process(grp_nbreadreq_fu_76_p6, dpiDetectState, grp_fu_135_p1)
    begin
                ap_sig_bdd_197 <= ((dpiDetectState = ap_const_lv2_2) and not((grp_nbreadreq_fu_76_p6 = ap_const_lv1_0)) and not((ap_const_lv1_0 = grp_fu_135_p1)));
    end process;


    -- ap_sig_bdd_23 assign process. --
    ap_sig_bdd_23_assign_proc : process(ap_CS_fsm0)
    begin
                ap_sig_bdd_23 <= (ap_CS_fsm0(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_34 assign process. --
    ap_sig_bdd_34_assign_proc : process(ap_CS_fsm1)
    begin
                ap_sig_bdd_34 <= (ap_const_lv1_1 = ap_CS_fsm1(0 downto 0));
    end process;


    -- ap_sig_bdd_52 assign process. --
    ap_sig_bdd_52_assign_proc : process(grp_nbreadreq_fu_76_p6, dpiDetectState)
    begin
                ap_sig_bdd_52 <= (not((grp_nbreadreq_fu_76_p6 = ap_const_lv1_0)) and (dpiDetectState = ap_const_lv2_1));
    end process;


    -- ap_sig_bdd_56 assign process. --
    ap_sig_bdd_56_assign_proc : process(grp_nbreadreq_fu_76_p6, dpiDetectState)
    begin
                ap_sig_bdd_56 <= (not((grp_nbreadreq_fu_76_p6 = ap_const_lv1_0)) and (dpiDetectState = ap_const_lv2_0));
    end process;


    -- ap_sig_bdd_63 assign process. --
    ap_sig_bdd_63_assign_proc : process(ap_start, ap_done_reg, inData_TVALID, grp_nbreadreq_fu_76_p6, dpiDetectState)
    begin
                ap_sig_bdd_63 <= (((inData_TVALID = ap_const_logic_0) and (dpiDetectState = ap_const_lv2_2) and not((grp_nbreadreq_fu_76_p6 = ap_const_lv1_0))) or ((inData_TVALID = ap_const_logic_0) and not((grp_nbreadreq_fu_76_p6 = ap_const_lv1_0)) and (dpiDetectState = ap_const_lv2_1)) or ((inData_TVALID = ap_const_logic_0) and not((grp_nbreadreq_fu_76_p6 = ap_const_lv1_0)) and (dpiDetectState = ap_const_lv2_0)) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_cseq_ST_st0_fsm1_0 assign process. --
    ap_sig_cseq_ST_st0_fsm1_0_assign_proc : process(ap_sig_bdd_34)
    begin
        if (ap_sig_bdd_34) then 
            ap_sig_cseq_ST_st0_fsm1_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st0_fsm1_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm0_0 assign process. --
    ap_sig_cseq_ST_st1_fsm0_0_assign_proc : process(ap_sig_bdd_23)
    begin
        if (ap_sig_bdd_23) then 
            ap_sig_cseq_ST_st1_fsm0_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm0_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm1_1 assign process. --
    ap_sig_cseq_ST_st2_fsm1_1_assign_proc : process(ap_sig_bdd_108)
    begin
        if (ap_sig_bdd_108) then 
            ap_sig_cseq_ST_st2_fsm1_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm1_1 <= ap_const_logic_0;
        end if; 
    end process;

    dpiDetectState_load_load_fu_163_p1 <= dpiDetectState;
    grp_fu_118_p2 <= "1" when (dmp_macType_V = ap_const_lv16_800) else "0";
    grp_fu_135_p1 <= inData_TLAST;
    grp_nbreadreq_fu_76_p6 <= (0=>(inData_TVALID), others=>'-');

    -- inData_TREADY assign process. --
    inData_TREADY_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st1_fsm0_0, grp_nbreadreq_fu_76_p6, ap_sig_bdd_63, ap_sig_bdd_102, ap_sig_cseq_ST_st2_fsm1_1, dpiDetectState)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and (dpiDetectState = ap_const_lv2_2) and not((grp_nbreadreq_fu_76_p6 = ap_const_lv1_0)) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_63 or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1))))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not((grp_nbreadreq_fu_76_p6 = ap_const_lv1_0)) and (dpiDetectState = ap_const_lv2_1) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_63 or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1))))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not((grp_nbreadreq_fu_76_p6 = ap_const_lv1_0)) and (dpiDetectState = ap_const_lv2_0) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_63 or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1))))))) then 
            inData_TREADY <= ap_const_logic_1;
        else 
            inData_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_4_fu_200_p4 <= inData_TDATA(47 downto 40);
    p_Result_6_fu_210_p4 <= inData_TDATA(39 downto 32);
    p_Result_s_fu_220_p3 <= (p_Result_6_fu_210_p4 & p_Result_4_fu_200_p4);
    parser2dpi_V_data_V1_status <= (parser2dpi_V_data_V_full_n and parser2dpi_V_strb_V_full_n and parser2dpi_V_user_V_full_n and parser2dpi_V_last_V_full_n);

    -- parser2dpi_V_data_V1_update assign process. --
    parser2dpi_V_data_V1_update_assign_proc : process(ap_done_reg, dpiDetectState_load_reg_252, tmp_4_reg_276, tmp_2_reg_280, tmp_9_reg_288, tmp_1_reg_292, tmp_7_reg_296, ap_sig_bdd_102, ap_sig_cseq_ST_st2_fsm1_1)
    begin
        if ((((dpiDetectState_load_reg_252 = ap_const_lv2_3) and not((ap_const_lv1_0 = tmp_4_reg_276)) and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_102))) or ((ap_const_lv2_2 = dpiDetectState_load_reg_252) and not((ap_const_lv1_0 = tmp_2_reg_280)) and not((ap_const_lv1_0 = tmp_9_reg_288)) and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_102))) or ((ap_const_lv2_1 = dpiDetectState_load_reg_252) and not((ap_const_lv1_0 = tmp_1_reg_292)) and not((ap_const_lv1_0 = tmp_7_reg_296)) and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_102))))) then 
            parser2dpi_V_data_V1_update <= ap_const_logic_1;
        else 
            parser2dpi_V_data_V1_update <= ap_const_logic_0;
        end if; 
    end process;

    parser2dpi_V_data_V_din <= tmp_data_V_3_reg_256;
    parser2dpi_V_data_V_write <= parser2dpi_V_data_V1_update;
    parser2dpi_V_last_V_din <= tmp_last_V_3_reg_271;
    parser2dpi_V_last_V_write <= parser2dpi_V_data_V1_update;
    parser2dpi_V_strb_V_din <= tmp_strb_V_3_reg_261;
    parser2dpi_V_strb_V_write <= parser2dpi_V_data_V1_update;
    parser2dpi_V_user_V_din <= tmp_user_V_3_reg_266;
    parser2dpi_V_user_V_write <= parser2dpi_V_data_V1_update;
    tmp_7_fu_234_p2 <= "1" when (p_Result_s_fu_220_p3 = ap_const_lv16_800) else "0";
end behav;
