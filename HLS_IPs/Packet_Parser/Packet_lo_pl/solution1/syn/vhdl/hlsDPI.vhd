-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.3
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hlsDPI is
port (
    inData_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    inData_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    inData_TUSER : IN STD_LOGIC_VECTOR (127 downto 0);
    inData_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    outData_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    outData_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    outData_TUSER : OUT STD_LOGIC_VECTOR (127 downto 0);
    outData_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    inData_TVALID : IN STD_LOGIC;
    inData_TREADY : OUT STD_LOGIC;
    outData_TVALID : OUT STD_LOGIC;
    outData_TREADY : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC );
end;


architecture behav of hlsDPI is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hlsDPI,hls_ip_2015_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=16.885000,HLS_SYN_LAT=3,HLS_SYN_TPT=1,HLS_SYN_MEM=12,HLS_SYN_DSP=0,HLS_SYN_FF=1323,HLS_SYN_LUT=737}";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_true : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal hlsDPI_ethernetDetection_U0_ap_start : STD_LOGIC;
    signal hlsDPI_ethernetDetection_U0_ap_done : STD_LOGIC;
    signal hlsDPI_ethernetDetection_U0_ap_continue : STD_LOGIC;
    signal hlsDPI_ethernetDetection_U0_ap_idle : STD_LOGIC;
    signal hlsDPI_ethernetDetection_U0_ap_ready : STD_LOGIC;
    signal hlsDPI_ethernetDetection_U0_inData_TVALID : STD_LOGIC;
    signal hlsDPI_ethernetDetection_U0_inData_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal hlsDPI_ethernetDetection_U0_inData_TREADY : STD_LOGIC;
    signal hlsDPI_ethernetDetection_U0_inData_TSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal hlsDPI_ethernetDetection_U0_inData_TUSER : STD_LOGIC_VECTOR (127 downto 0);
    signal hlsDPI_ethernetDetection_U0_inData_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal hlsDPI_ethernetDetection_U0_parser2dpi_V_data_V_din : STD_LOGIC_VECTOR (63 downto 0);
    signal hlsDPI_ethernetDetection_U0_parser2dpi_V_data_V_full_n : STD_LOGIC;
    signal hlsDPI_ethernetDetection_U0_parser2dpi_V_data_V_write : STD_LOGIC;
    signal hlsDPI_ethernetDetection_U0_parser2dpi_V_strb_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal hlsDPI_ethernetDetection_U0_parser2dpi_V_strb_V_full_n : STD_LOGIC;
    signal hlsDPI_ethernetDetection_U0_parser2dpi_V_strb_V_write : STD_LOGIC;
    signal hlsDPI_ethernetDetection_U0_parser2dpi_V_user_V_din : STD_LOGIC_VECTOR (127 downto 0);
    signal hlsDPI_ethernetDetection_U0_parser2dpi_V_user_V_full_n : STD_LOGIC;
    signal hlsDPI_ethernetDetection_U0_parser2dpi_V_user_V_write : STD_LOGIC;
    signal hlsDPI_ethernetDetection_U0_parser2dpi_V_last_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal hlsDPI_ethernetDetection_U0_parser2dpi_V_last_V_full_n : STD_LOGIC;
    signal hlsDPI_ethernetDetection_U0_parser2dpi_V_last_V_write : STD_LOGIC;
    signal hlsDPI_dpi_U0_ap_start : STD_LOGIC := '0';
    signal hlsDPI_dpi_U0_ap_done : STD_LOGIC;
    signal hlsDPI_dpi_U0_ap_continue : STD_LOGIC;
    signal hlsDPI_dpi_U0_ap_idle : STD_LOGIC;
    signal hlsDPI_dpi_U0_ap_ready : STD_LOGIC;
    signal hlsDPI_dpi_U0_outData_TREADY : STD_LOGIC;
    signal hlsDPI_dpi_U0_outData_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal hlsDPI_dpi_U0_outData_TVALID : STD_LOGIC;
    signal hlsDPI_dpi_U0_outData_TSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal hlsDPI_dpi_U0_outData_TUSER : STD_LOGIC_VECTOR (127 downto 0);
    signal hlsDPI_dpi_U0_outData_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal hlsDPI_dpi_U0_parser2dpi_V_data_V_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal hlsDPI_dpi_U0_parser2dpi_V_data_V_empty_n : STD_LOGIC;
    signal hlsDPI_dpi_U0_parser2dpi_V_data_V_read : STD_LOGIC;
    signal hlsDPI_dpi_U0_parser2dpi_V_strb_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal hlsDPI_dpi_U0_parser2dpi_V_strb_V_empty_n : STD_LOGIC;
    signal hlsDPI_dpi_U0_parser2dpi_V_strb_V_read : STD_LOGIC;
    signal hlsDPI_dpi_U0_parser2dpi_V_user_V_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal hlsDPI_dpi_U0_parser2dpi_V_user_V_empty_n : STD_LOGIC;
    signal hlsDPI_dpi_U0_parser2dpi_V_user_V_read : STD_LOGIC;
    signal hlsDPI_dpi_U0_parser2dpi_V_last_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal hlsDPI_dpi_U0_parser2dpi_V_last_V_empty_n : STD_LOGIC;
    signal hlsDPI_dpi_U0_parser2dpi_V_last_V_read : STD_LOGIC;
    signal ap_sig_hs_continue : STD_LOGIC;
    signal parser2dpi_V_data_V_U_ap_dummy_ce : STD_LOGIC;
    signal parser2dpi_V_data_V_din : STD_LOGIC_VECTOR (63 downto 0);
    signal parser2dpi_V_data_V_full_n : STD_LOGIC;
    signal parser2dpi_V_data_V_write : STD_LOGIC;
    signal parser2dpi_V_data_V_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal parser2dpi_V_data_V_empty_n : STD_LOGIC;
    signal parser2dpi_V_data_V_read : STD_LOGIC;
    signal parser2dpi_V_strb_V_U_ap_dummy_ce : STD_LOGIC;
    signal parser2dpi_V_strb_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal parser2dpi_V_strb_V_full_n : STD_LOGIC;
    signal parser2dpi_V_strb_V_write : STD_LOGIC;
    signal parser2dpi_V_strb_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal parser2dpi_V_strb_V_empty_n : STD_LOGIC;
    signal parser2dpi_V_strb_V_read : STD_LOGIC;
    signal parser2dpi_V_user_V_U_ap_dummy_ce : STD_LOGIC;
    signal parser2dpi_V_user_V_din : STD_LOGIC_VECTOR (127 downto 0);
    signal parser2dpi_V_user_V_full_n : STD_LOGIC;
    signal parser2dpi_V_user_V_write : STD_LOGIC;
    signal parser2dpi_V_user_V_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal parser2dpi_V_user_V_empty_n : STD_LOGIC;
    signal parser2dpi_V_user_V_read : STD_LOGIC;
    signal parser2dpi_V_last_V_U_ap_dummy_ce : STD_LOGIC;
    signal parser2dpi_V_last_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal parser2dpi_V_last_V_full_n : STD_LOGIC;
    signal parser2dpi_V_last_V_write : STD_LOGIC;
    signal parser2dpi_V_last_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal parser2dpi_V_last_V_empty_n : STD_LOGIC;
    signal parser2dpi_V_last_V_read : STD_LOGIC;
    signal ap_reg_procdone_hlsDPI_ethernetDetection_U0 : STD_LOGIC := '0';
    signal ap_sig_hs_done : STD_LOGIC;
    signal ap_reg_procdone_hlsDPI_dpi_U0 : STD_LOGIC := '0';
    signal ap_CS : STD_LOGIC;
    signal ap_sig_top_allready : STD_LOGIC;

    component hlsDPI_ethernetDetection IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inData_TVALID : IN STD_LOGIC;
        inData_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        inData_TREADY : OUT STD_LOGIC;
        inData_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        inData_TUSER : IN STD_LOGIC_VECTOR (127 downto 0);
        inData_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        parser2dpi_V_data_V_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        parser2dpi_V_data_V_full_n : IN STD_LOGIC;
        parser2dpi_V_data_V_write : OUT STD_LOGIC;
        parser2dpi_V_strb_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        parser2dpi_V_strb_V_full_n : IN STD_LOGIC;
        parser2dpi_V_strb_V_write : OUT STD_LOGIC;
        parser2dpi_V_user_V_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        parser2dpi_V_user_V_full_n : IN STD_LOGIC;
        parser2dpi_V_user_V_write : OUT STD_LOGIC;
        parser2dpi_V_last_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        parser2dpi_V_last_V_full_n : IN STD_LOGIC;
        parser2dpi_V_last_V_write : OUT STD_LOGIC );
    end component;


    component hlsDPI_dpi IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        outData_TREADY : IN STD_LOGIC;
        outData_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        outData_TVALID : OUT STD_LOGIC;
        outData_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        outData_TUSER : OUT STD_LOGIC_VECTOR (127 downto 0);
        outData_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        parser2dpi_V_data_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        parser2dpi_V_data_V_empty_n : IN STD_LOGIC;
        parser2dpi_V_data_V_read : OUT STD_LOGIC;
        parser2dpi_V_strb_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        parser2dpi_V_strb_V_empty_n : IN STD_LOGIC;
        parser2dpi_V_strb_V_read : OUT STD_LOGIC;
        parser2dpi_V_user_V_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        parser2dpi_V_user_V_empty_n : IN STD_LOGIC;
        parser2dpi_V_user_V_read : OUT STD_LOGIC;
        parser2dpi_V_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        parser2dpi_V_last_V_empty_n : IN STD_LOGIC;
        parser2dpi_V_last_V_read : OUT STD_LOGIC );
    end component;


    component FIFO_hlsDPI_parser2dpi_V_data_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_hlsDPI_parser2dpi_V_strb_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_hlsDPI_parser2dpi_V_user_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (127 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (127 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_hlsDPI_parser2dpi_V_last_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    hlsDPI_ethernetDetection_U0 : component hlsDPI_ethernetDetection
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => hlsDPI_ethernetDetection_U0_ap_start,
        ap_done => hlsDPI_ethernetDetection_U0_ap_done,
        ap_continue => hlsDPI_ethernetDetection_U0_ap_continue,
        ap_idle => hlsDPI_ethernetDetection_U0_ap_idle,
        ap_ready => hlsDPI_ethernetDetection_U0_ap_ready,
        inData_TVALID => hlsDPI_ethernetDetection_U0_inData_TVALID,
        inData_TDATA => hlsDPI_ethernetDetection_U0_inData_TDATA,
        inData_TREADY => hlsDPI_ethernetDetection_U0_inData_TREADY,
        inData_TSTRB => hlsDPI_ethernetDetection_U0_inData_TSTRB,
        inData_TUSER => hlsDPI_ethernetDetection_U0_inData_TUSER,
        inData_TLAST => hlsDPI_ethernetDetection_U0_inData_TLAST,
        parser2dpi_V_data_V_din => hlsDPI_ethernetDetection_U0_parser2dpi_V_data_V_din,
        parser2dpi_V_data_V_full_n => hlsDPI_ethernetDetection_U0_parser2dpi_V_data_V_full_n,
        parser2dpi_V_data_V_write => hlsDPI_ethernetDetection_U0_parser2dpi_V_data_V_write,
        parser2dpi_V_strb_V_din => hlsDPI_ethernetDetection_U0_parser2dpi_V_strb_V_din,
        parser2dpi_V_strb_V_full_n => hlsDPI_ethernetDetection_U0_parser2dpi_V_strb_V_full_n,
        parser2dpi_V_strb_V_write => hlsDPI_ethernetDetection_U0_parser2dpi_V_strb_V_write,
        parser2dpi_V_user_V_din => hlsDPI_ethernetDetection_U0_parser2dpi_V_user_V_din,
        parser2dpi_V_user_V_full_n => hlsDPI_ethernetDetection_U0_parser2dpi_V_user_V_full_n,
        parser2dpi_V_user_V_write => hlsDPI_ethernetDetection_U0_parser2dpi_V_user_V_write,
        parser2dpi_V_last_V_din => hlsDPI_ethernetDetection_U0_parser2dpi_V_last_V_din,
        parser2dpi_V_last_V_full_n => hlsDPI_ethernetDetection_U0_parser2dpi_V_last_V_full_n,
        parser2dpi_V_last_V_write => hlsDPI_ethernetDetection_U0_parser2dpi_V_last_V_write);

    hlsDPI_dpi_U0 : component hlsDPI_dpi
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => hlsDPI_dpi_U0_ap_start,
        ap_done => hlsDPI_dpi_U0_ap_done,
        ap_continue => hlsDPI_dpi_U0_ap_continue,
        ap_idle => hlsDPI_dpi_U0_ap_idle,
        ap_ready => hlsDPI_dpi_U0_ap_ready,
        outData_TREADY => hlsDPI_dpi_U0_outData_TREADY,
        outData_TDATA => hlsDPI_dpi_U0_outData_TDATA,
        outData_TVALID => hlsDPI_dpi_U0_outData_TVALID,
        outData_TSTRB => hlsDPI_dpi_U0_outData_TSTRB,
        outData_TUSER => hlsDPI_dpi_U0_outData_TUSER,
        outData_TLAST => hlsDPI_dpi_U0_outData_TLAST,
        parser2dpi_V_data_V_dout => hlsDPI_dpi_U0_parser2dpi_V_data_V_dout,
        parser2dpi_V_data_V_empty_n => hlsDPI_dpi_U0_parser2dpi_V_data_V_empty_n,
        parser2dpi_V_data_V_read => hlsDPI_dpi_U0_parser2dpi_V_data_V_read,
        parser2dpi_V_strb_V_dout => hlsDPI_dpi_U0_parser2dpi_V_strb_V_dout,
        parser2dpi_V_strb_V_empty_n => hlsDPI_dpi_U0_parser2dpi_V_strb_V_empty_n,
        parser2dpi_V_strb_V_read => hlsDPI_dpi_U0_parser2dpi_V_strb_V_read,
        parser2dpi_V_user_V_dout => hlsDPI_dpi_U0_parser2dpi_V_user_V_dout,
        parser2dpi_V_user_V_empty_n => hlsDPI_dpi_U0_parser2dpi_V_user_V_empty_n,
        parser2dpi_V_user_V_read => hlsDPI_dpi_U0_parser2dpi_V_user_V_read,
        parser2dpi_V_last_V_dout => hlsDPI_dpi_U0_parser2dpi_V_last_V_dout,
        parser2dpi_V_last_V_empty_n => hlsDPI_dpi_U0_parser2dpi_V_last_V_empty_n,
        parser2dpi_V_last_V_read => hlsDPI_dpi_U0_parser2dpi_V_last_V_read);

    parser2dpi_V_data_V_U : component FIFO_hlsDPI_parser2dpi_V_data_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => parser2dpi_V_data_V_U_ap_dummy_ce,
        if_write_ce => parser2dpi_V_data_V_U_ap_dummy_ce,
        if_din => parser2dpi_V_data_V_din,
        if_full_n => parser2dpi_V_data_V_full_n,
        if_write => parser2dpi_V_data_V_write,
        if_dout => parser2dpi_V_data_V_dout,
        if_empty_n => parser2dpi_V_data_V_empty_n,
        if_read => parser2dpi_V_data_V_read);

    parser2dpi_V_strb_V_U : component FIFO_hlsDPI_parser2dpi_V_strb_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => parser2dpi_V_strb_V_U_ap_dummy_ce,
        if_write_ce => parser2dpi_V_strb_V_U_ap_dummy_ce,
        if_din => parser2dpi_V_strb_V_din,
        if_full_n => parser2dpi_V_strb_V_full_n,
        if_write => parser2dpi_V_strb_V_write,
        if_dout => parser2dpi_V_strb_V_dout,
        if_empty_n => parser2dpi_V_strb_V_empty_n,
        if_read => parser2dpi_V_strb_V_read);

    parser2dpi_V_user_V_U : component FIFO_hlsDPI_parser2dpi_V_user_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => parser2dpi_V_user_V_U_ap_dummy_ce,
        if_write_ce => parser2dpi_V_user_V_U_ap_dummy_ce,
        if_din => parser2dpi_V_user_V_din,
        if_full_n => parser2dpi_V_user_V_full_n,
        if_write => parser2dpi_V_user_V_write,
        if_dout => parser2dpi_V_user_V_dout,
        if_empty_n => parser2dpi_V_user_V_empty_n,
        if_read => parser2dpi_V_user_V_read);

    parser2dpi_V_last_V_U : component FIFO_hlsDPI_parser2dpi_V_last_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => parser2dpi_V_last_V_U_ap_dummy_ce,
        if_write_ce => parser2dpi_V_last_V_U_ap_dummy_ce,
        if_din => parser2dpi_V_last_V_din,
        if_full_n => parser2dpi_V_last_V_full_n,
        if_write => parser2dpi_V_last_V_write,
        if_dout => parser2dpi_V_last_V_dout,
        if_empty_n => parser2dpi_V_last_V_empty_n,
        if_read => parser2dpi_V_last_V_read);





    -- ap_reg_procdone_hlsDPI_dpi_U0 assign process. --
    ap_reg_procdone_hlsDPI_dpi_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_hlsDPI_dpi_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_hlsDPI_dpi_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = hlsDPI_dpi_U0_ap_done)) then 
                    ap_reg_procdone_hlsDPI_dpi_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_hlsDPI_ethernetDetection_U0 assign process. --
    ap_reg_procdone_hlsDPI_ethernetDetection_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_hlsDPI_ethernetDetection_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_hlsDPI_ethernetDetection_U0 <= ap_const_logic_0;
                elsif ((hlsDPI_ethernetDetection_U0_ap_done = ap_const_logic_1)) then 
                    ap_reg_procdone_hlsDPI_ethernetDetection_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- hlsDPI_dpi_U0_ap_start assign process. --
    hlsDPI_dpi_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                hlsDPI_dpi_U0_ap_start <= ap_const_logic_0;
            else
                hlsDPI_dpi_U0_ap_start <= ap_const_logic_1;
            end if;
        end if;
    end process;


    -- ap_CS assign process. --
    ap_CS_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_CS <= ap_const_logic_0;
        end if;
    end process;
    ap_done <= ap_sig_hs_done;

    -- ap_idle assign process. --
    ap_idle_assign_proc : process(hlsDPI_ethernetDetection_U0_ap_idle, hlsDPI_dpi_U0_ap_idle)
    begin
        if (((hlsDPI_ethernetDetection_U0_ap_idle = ap_const_logic_1) and (ap_const_logic_1 = hlsDPI_dpi_U0_ap_idle))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= ap_sig_top_allready;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sig_hs_continue <= ap_const_logic_1;

    -- ap_sig_hs_done assign process. --
    ap_sig_hs_done_assign_proc : process(hlsDPI_dpi_U0_ap_done)
    begin
        if ((ap_const_logic_1 = hlsDPI_dpi_U0_ap_done)) then 
            ap_sig_hs_done <= ap_const_logic_1;
        else 
            ap_sig_hs_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_sig_top_allready <= hlsDPI_ethernetDetection_U0_ap_ready;
    hlsDPI_dpi_U0_ap_continue <= ap_sig_hs_continue;
    hlsDPI_dpi_U0_outData_TREADY <= outData_TREADY;
    hlsDPI_dpi_U0_parser2dpi_V_data_V_dout <= parser2dpi_V_data_V_dout;
    hlsDPI_dpi_U0_parser2dpi_V_data_V_empty_n <= parser2dpi_V_data_V_empty_n;
    hlsDPI_dpi_U0_parser2dpi_V_last_V_dout <= parser2dpi_V_last_V_dout;
    hlsDPI_dpi_U0_parser2dpi_V_last_V_empty_n <= parser2dpi_V_last_V_empty_n;
    hlsDPI_dpi_U0_parser2dpi_V_strb_V_dout <= parser2dpi_V_strb_V_dout;
    hlsDPI_dpi_U0_parser2dpi_V_strb_V_empty_n <= parser2dpi_V_strb_V_empty_n;
    hlsDPI_dpi_U0_parser2dpi_V_user_V_dout <= parser2dpi_V_user_V_dout;
    hlsDPI_dpi_U0_parser2dpi_V_user_V_empty_n <= parser2dpi_V_user_V_empty_n;
    hlsDPI_ethernetDetection_U0_ap_continue <= ap_const_logic_1;
    hlsDPI_ethernetDetection_U0_ap_start <= ap_start;
    hlsDPI_ethernetDetection_U0_inData_TDATA <= inData_TDATA;
    hlsDPI_ethernetDetection_U0_inData_TLAST <= inData_TLAST;
    hlsDPI_ethernetDetection_U0_inData_TSTRB <= inData_TSTRB;
    hlsDPI_ethernetDetection_U0_inData_TUSER <= inData_TUSER;
    hlsDPI_ethernetDetection_U0_inData_TVALID <= inData_TVALID;
    hlsDPI_ethernetDetection_U0_parser2dpi_V_data_V_full_n <= parser2dpi_V_data_V_full_n;
    hlsDPI_ethernetDetection_U0_parser2dpi_V_last_V_full_n <= parser2dpi_V_last_V_full_n;
    hlsDPI_ethernetDetection_U0_parser2dpi_V_strb_V_full_n <= parser2dpi_V_strb_V_full_n;
    hlsDPI_ethernetDetection_U0_parser2dpi_V_user_V_full_n <= parser2dpi_V_user_V_full_n;
    inData_TREADY <= hlsDPI_ethernetDetection_U0_inData_TREADY;
    outData_TDATA <= hlsDPI_dpi_U0_outData_TDATA;
    outData_TLAST <= hlsDPI_dpi_U0_outData_TLAST;
    outData_TSTRB <= hlsDPI_dpi_U0_outData_TSTRB;
    outData_TUSER <= hlsDPI_dpi_U0_outData_TUSER;
    outData_TVALID <= hlsDPI_dpi_U0_outData_TVALID;
    parser2dpi_V_data_V_U_ap_dummy_ce <= ap_const_logic_1;
    parser2dpi_V_data_V_din <= hlsDPI_ethernetDetection_U0_parser2dpi_V_data_V_din;
    parser2dpi_V_data_V_read <= hlsDPI_dpi_U0_parser2dpi_V_data_V_read;
    parser2dpi_V_data_V_write <= hlsDPI_ethernetDetection_U0_parser2dpi_V_data_V_write;
    parser2dpi_V_last_V_U_ap_dummy_ce <= ap_const_logic_1;
    parser2dpi_V_last_V_din <= hlsDPI_ethernetDetection_U0_parser2dpi_V_last_V_din;
    parser2dpi_V_last_V_read <= hlsDPI_dpi_U0_parser2dpi_V_last_V_read;
    parser2dpi_V_last_V_write <= hlsDPI_ethernetDetection_U0_parser2dpi_V_last_V_write;
    parser2dpi_V_strb_V_U_ap_dummy_ce <= ap_const_logic_1;
    parser2dpi_V_strb_V_din <= hlsDPI_ethernetDetection_U0_parser2dpi_V_strb_V_din;
    parser2dpi_V_strb_V_read <= hlsDPI_dpi_U0_parser2dpi_V_strb_V_read;
    parser2dpi_V_strb_V_write <= hlsDPI_ethernetDetection_U0_parser2dpi_V_strb_V_write;
    parser2dpi_V_user_V_U_ap_dummy_ce <= ap_const_logic_1;
    parser2dpi_V_user_V_din <= hlsDPI_ethernetDetection_U0_parser2dpi_V_user_V_din;
    parser2dpi_V_user_V_read <= hlsDPI_dpi_U0_parser2dpi_V_user_V_read;
    parser2dpi_V_user_V_write <= hlsDPI_ethernetDetection_U0_parser2dpi_V_user_V_write;
end behav;
