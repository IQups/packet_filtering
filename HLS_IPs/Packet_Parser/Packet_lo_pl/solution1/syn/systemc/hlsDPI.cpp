// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.3
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "hlsDPI.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_lv<64> hlsDPI::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<8> hlsDPI::ap_const_lv8_0 = "00000000";
const sc_lv<128> hlsDPI::ap_const_lv128_lc_1 = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<1> hlsDPI::ap_const_lv1_0 = "0";
const sc_logic hlsDPI::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic hlsDPI::ap_const_logic_0 = sc_dt::Log_0;
const bool hlsDPI::ap_true = true;

hlsDPI::hlsDPI(sc_module_name name) : sc_module(name), mVcdFile(0) {
    hlsDPI_ethernetDetection_U0 = new hlsDPI_ethernetDetection("hlsDPI_ethernetDetection_U0");
    hlsDPI_ethernetDetection_U0->ap_clk(ap_clk);
    hlsDPI_ethernetDetection_U0->ap_rst(ap_rst_n_inv);
    hlsDPI_ethernetDetection_U0->ap_start(hlsDPI_ethernetDetection_U0_ap_start);
    hlsDPI_ethernetDetection_U0->ap_done(hlsDPI_ethernetDetection_U0_ap_done);
    hlsDPI_ethernetDetection_U0->ap_continue(hlsDPI_ethernetDetection_U0_ap_continue);
    hlsDPI_ethernetDetection_U0->ap_idle(hlsDPI_ethernetDetection_U0_ap_idle);
    hlsDPI_ethernetDetection_U0->ap_ready(hlsDPI_ethernetDetection_U0_ap_ready);
    hlsDPI_ethernetDetection_U0->inData_TVALID(hlsDPI_ethernetDetection_U0_inData_TVALID);
    hlsDPI_ethernetDetection_U0->inData_TDATA(hlsDPI_ethernetDetection_U0_inData_TDATA);
    hlsDPI_ethernetDetection_U0->inData_TREADY(hlsDPI_ethernetDetection_U0_inData_TREADY);
    hlsDPI_ethernetDetection_U0->inData_TSTRB(hlsDPI_ethernetDetection_U0_inData_TSTRB);
    hlsDPI_ethernetDetection_U0->inData_TUSER(hlsDPI_ethernetDetection_U0_inData_TUSER);
    hlsDPI_ethernetDetection_U0->inData_TLAST(hlsDPI_ethernetDetection_U0_inData_TLAST);
    hlsDPI_ethernetDetection_U0->parser2dpi_V_data_V_din(hlsDPI_ethernetDetection_U0_parser2dpi_V_data_V_din);
    hlsDPI_ethernetDetection_U0->parser2dpi_V_data_V_full_n(hlsDPI_ethernetDetection_U0_parser2dpi_V_data_V_full_n);
    hlsDPI_ethernetDetection_U0->parser2dpi_V_data_V_write(hlsDPI_ethernetDetection_U0_parser2dpi_V_data_V_write);
    hlsDPI_ethernetDetection_U0->parser2dpi_V_strb_V_din(hlsDPI_ethernetDetection_U0_parser2dpi_V_strb_V_din);
    hlsDPI_ethernetDetection_U0->parser2dpi_V_strb_V_full_n(hlsDPI_ethernetDetection_U0_parser2dpi_V_strb_V_full_n);
    hlsDPI_ethernetDetection_U0->parser2dpi_V_strb_V_write(hlsDPI_ethernetDetection_U0_parser2dpi_V_strb_V_write);
    hlsDPI_ethernetDetection_U0->parser2dpi_V_user_V_din(hlsDPI_ethernetDetection_U0_parser2dpi_V_user_V_din);
    hlsDPI_ethernetDetection_U0->parser2dpi_V_user_V_full_n(hlsDPI_ethernetDetection_U0_parser2dpi_V_user_V_full_n);
    hlsDPI_ethernetDetection_U0->parser2dpi_V_user_V_write(hlsDPI_ethernetDetection_U0_parser2dpi_V_user_V_write);
    hlsDPI_ethernetDetection_U0->parser2dpi_V_last_V_din(hlsDPI_ethernetDetection_U0_parser2dpi_V_last_V_din);
    hlsDPI_ethernetDetection_U0->parser2dpi_V_last_V_full_n(hlsDPI_ethernetDetection_U0_parser2dpi_V_last_V_full_n);
    hlsDPI_ethernetDetection_U0->parser2dpi_V_last_V_write(hlsDPI_ethernetDetection_U0_parser2dpi_V_last_V_write);
    hlsDPI_dpi_U0 = new hlsDPI_dpi("hlsDPI_dpi_U0");
    hlsDPI_dpi_U0->ap_clk(ap_clk);
    hlsDPI_dpi_U0->ap_rst(ap_rst_n_inv);
    hlsDPI_dpi_U0->ap_start(hlsDPI_dpi_U0_ap_start);
    hlsDPI_dpi_U0->ap_done(hlsDPI_dpi_U0_ap_done);
    hlsDPI_dpi_U0->ap_continue(hlsDPI_dpi_U0_ap_continue);
    hlsDPI_dpi_U0->ap_idle(hlsDPI_dpi_U0_ap_idle);
    hlsDPI_dpi_U0->ap_ready(hlsDPI_dpi_U0_ap_ready);
    hlsDPI_dpi_U0->outData_TREADY(hlsDPI_dpi_U0_outData_TREADY);
    hlsDPI_dpi_U0->outData_TDATA(hlsDPI_dpi_U0_outData_TDATA);
    hlsDPI_dpi_U0->outData_TVALID(hlsDPI_dpi_U0_outData_TVALID);
    hlsDPI_dpi_U0->outData_TSTRB(hlsDPI_dpi_U0_outData_TSTRB);
    hlsDPI_dpi_U0->outData_TUSER(hlsDPI_dpi_U0_outData_TUSER);
    hlsDPI_dpi_U0->outData_TLAST(hlsDPI_dpi_U0_outData_TLAST);
    hlsDPI_dpi_U0->parser2dpi_V_data_V_dout(hlsDPI_dpi_U0_parser2dpi_V_data_V_dout);
    hlsDPI_dpi_U0->parser2dpi_V_data_V_empty_n(hlsDPI_dpi_U0_parser2dpi_V_data_V_empty_n);
    hlsDPI_dpi_U0->parser2dpi_V_data_V_read(hlsDPI_dpi_U0_parser2dpi_V_data_V_read);
    hlsDPI_dpi_U0->parser2dpi_V_strb_V_dout(hlsDPI_dpi_U0_parser2dpi_V_strb_V_dout);
    hlsDPI_dpi_U0->parser2dpi_V_strb_V_empty_n(hlsDPI_dpi_U0_parser2dpi_V_strb_V_empty_n);
    hlsDPI_dpi_U0->parser2dpi_V_strb_V_read(hlsDPI_dpi_U0_parser2dpi_V_strb_V_read);
    hlsDPI_dpi_U0->parser2dpi_V_user_V_dout(hlsDPI_dpi_U0_parser2dpi_V_user_V_dout);
    hlsDPI_dpi_U0->parser2dpi_V_user_V_empty_n(hlsDPI_dpi_U0_parser2dpi_V_user_V_empty_n);
    hlsDPI_dpi_U0->parser2dpi_V_user_V_read(hlsDPI_dpi_U0_parser2dpi_V_user_V_read);
    hlsDPI_dpi_U0->parser2dpi_V_last_V_dout(hlsDPI_dpi_U0_parser2dpi_V_last_V_dout);
    hlsDPI_dpi_U0->parser2dpi_V_last_V_empty_n(hlsDPI_dpi_U0_parser2dpi_V_last_V_empty_n);
    hlsDPI_dpi_U0->parser2dpi_V_last_V_read(hlsDPI_dpi_U0_parser2dpi_V_last_V_read);
    parser2dpi_V_data_V_U = new FIFO_hlsDPI_parser2dpi_V_data_V("parser2dpi_V_data_V_U");
    parser2dpi_V_data_V_U->clk(ap_clk);
    parser2dpi_V_data_V_U->reset(ap_rst_n_inv);
    parser2dpi_V_data_V_U->if_read_ce(parser2dpi_V_data_V_U_ap_dummy_ce);
    parser2dpi_V_data_V_U->if_write_ce(parser2dpi_V_data_V_U_ap_dummy_ce);
    parser2dpi_V_data_V_U->if_din(parser2dpi_V_data_V_din);
    parser2dpi_V_data_V_U->if_full_n(parser2dpi_V_data_V_full_n);
    parser2dpi_V_data_V_U->if_write(parser2dpi_V_data_V_write);
    parser2dpi_V_data_V_U->if_dout(parser2dpi_V_data_V_dout);
    parser2dpi_V_data_V_U->if_empty_n(parser2dpi_V_data_V_empty_n);
    parser2dpi_V_data_V_U->if_read(parser2dpi_V_data_V_read);
    parser2dpi_V_strb_V_U = new FIFO_hlsDPI_parser2dpi_V_strb_V("parser2dpi_V_strb_V_U");
    parser2dpi_V_strb_V_U->clk(ap_clk);
    parser2dpi_V_strb_V_U->reset(ap_rst_n_inv);
    parser2dpi_V_strb_V_U->if_read_ce(parser2dpi_V_strb_V_U_ap_dummy_ce);
    parser2dpi_V_strb_V_U->if_write_ce(parser2dpi_V_strb_V_U_ap_dummy_ce);
    parser2dpi_V_strb_V_U->if_din(parser2dpi_V_strb_V_din);
    parser2dpi_V_strb_V_U->if_full_n(parser2dpi_V_strb_V_full_n);
    parser2dpi_V_strb_V_U->if_write(parser2dpi_V_strb_V_write);
    parser2dpi_V_strb_V_U->if_dout(parser2dpi_V_strb_V_dout);
    parser2dpi_V_strb_V_U->if_empty_n(parser2dpi_V_strb_V_empty_n);
    parser2dpi_V_strb_V_U->if_read(parser2dpi_V_strb_V_read);
    parser2dpi_V_user_V_U = new FIFO_hlsDPI_parser2dpi_V_user_V("parser2dpi_V_user_V_U");
    parser2dpi_V_user_V_U->clk(ap_clk);
    parser2dpi_V_user_V_U->reset(ap_rst_n_inv);
    parser2dpi_V_user_V_U->if_read_ce(parser2dpi_V_user_V_U_ap_dummy_ce);
    parser2dpi_V_user_V_U->if_write_ce(parser2dpi_V_user_V_U_ap_dummy_ce);
    parser2dpi_V_user_V_U->if_din(parser2dpi_V_user_V_din);
    parser2dpi_V_user_V_U->if_full_n(parser2dpi_V_user_V_full_n);
    parser2dpi_V_user_V_U->if_write(parser2dpi_V_user_V_write);
    parser2dpi_V_user_V_U->if_dout(parser2dpi_V_user_V_dout);
    parser2dpi_V_user_V_U->if_empty_n(parser2dpi_V_user_V_empty_n);
    parser2dpi_V_user_V_U->if_read(parser2dpi_V_user_V_read);
    parser2dpi_V_last_V_U = new FIFO_hlsDPI_parser2dpi_V_last_V("parser2dpi_V_last_V_U");
    parser2dpi_V_last_V_U->clk(ap_clk);
    parser2dpi_V_last_V_U->reset(ap_rst_n_inv);
    parser2dpi_V_last_V_U->if_read_ce(parser2dpi_V_last_V_U_ap_dummy_ce);
    parser2dpi_V_last_V_U->if_write_ce(parser2dpi_V_last_V_U_ap_dummy_ce);
    parser2dpi_V_last_V_U->if_din(parser2dpi_V_last_V_din);
    parser2dpi_V_last_V_U->if_full_n(parser2dpi_V_last_V_full_n);
    parser2dpi_V_last_V_U->if_write(parser2dpi_V_last_V_write);
    parser2dpi_V_last_V_U->if_dout(parser2dpi_V_last_V_dout);
    parser2dpi_V_last_V_U->if_empty_n(parser2dpi_V_last_V_empty_n);
    parser2dpi_V_last_V_U->if_read(parser2dpi_V_last_V_read);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sig_hs_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( hlsDPI_ethernetDetection_U0_ap_idle );
    sensitive << ( hlsDPI_dpi_U0_ap_idle );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_top_allready );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_hs_continue);

    SC_METHOD(thread_ap_sig_hs_done);
    sensitive << ( hlsDPI_dpi_U0_ap_done );

    SC_METHOD(thread_ap_sig_top_allready);
    sensitive << ( hlsDPI_ethernetDetection_U0_ap_ready );

    SC_METHOD(thread_hlsDPI_dpi_U0_ap_continue);
    sensitive << ( ap_sig_hs_continue );

    SC_METHOD(thread_hlsDPI_dpi_U0_outData_TREADY);
    sensitive << ( outData_TREADY );

    SC_METHOD(thread_hlsDPI_dpi_U0_parser2dpi_V_data_V_dout);
    sensitive << ( parser2dpi_V_data_V_dout );

    SC_METHOD(thread_hlsDPI_dpi_U0_parser2dpi_V_data_V_empty_n);
    sensitive << ( parser2dpi_V_data_V_empty_n );

    SC_METHOD(thread_hlsDPI_dpi_U0_parser2dpi_V_last_V_dout);
    sensitive << ( parser2dpi_V_last_V_dout );

    SC_METHOD(thread_hlsDPI_dpi_U0_parser2dpi_V_last_V_empty_n);
    sensitive << ( parser2dpi_V_last_V_empty_n );

    SC_METHOD(thread_hlsDPI_dpi_U0_parser2dpi_V_strb_V_dout);
    sensitive << ( parser2dpi_V_strb_V_dout );

    SC_METHOD(thread_hlsDPI_dpi_U0_parser2dpi_V_strb_V_empty_n);
    sensitive << ( parser2dpi_V_strb_V_empty_n );

    SC_METHOD(thread_hlsDPI_dpi_U0_parser2dpi_V_user_V_dout);
    sensitive << ( parser2dpi_V_user_V_dout );

    SC_METHOD(thread_hlsDPI_dpi_U0_parser2dpi_V_user_V_empty_n);
    sensitive << ( parser2dpi_V_user_V_empty_n );

    SC_METHOD(thread_hlsDPI_ethernetDetection_U0_ap_continue);

    SC_METHOD(thread_hlsDPI_ethernetDetection_U0_ap_start);
    sensitive << ( ap_start );

    SC_METHOD(thread_hlsDPI_ethernetDetection_U0_inData_TDATA);
    sensitive << ( inData_TDATA );

    SC_METHOD(thread_hlsDPI_ethernetDetection_U0_inData_TLAST);
    sensitive << ( inData_TLAST );

    SC_METHOD(thread_hlsDPI_ethernetDetection_U0_inData_TSTRB);
    sensitive << ( inData_TSTRB );

    SC_METHOD(thread_hlsDPI_ethernetDetection_U0_inData_TUSER);
    sensitive << ( inData_TUSER );

    SC_METHOD(thread_hlsDPI_ethernetDetection_U0_inData_TVALID);
    sensitive << ( inData_TVALID );

    SC_METHOD(thread_hlsDPI_ethernetDetection_U0_parser2dpi_V_data_V_full_n);
    sensitive << ( parser2dpi_V_data_V_full_n );

    SC_METHOD(thread_hlsDPI_ethernetDetection_U0_parser2dpi_V_last_V_full_n);
    sensitive << ( parser2dpi_V_last_V_full_n );

    SC_METHOD(thread_hlsDPI_ethernetDetection_U0_parser2dpi_V_strb_V_full_n);
    sensitive << ( parser2dpi_V_strb_V_full_n );

    SC_METHOD(thread_hlsDPI_ethernetDetection_U0_parser2dpi_V_user_V_full_n);
    sensitive << ( parser2dpi_V_user_V_full_n );

    SC_METHOD(thread_inData_TREADY);
    sensitive << ( hlsDPI_ethernetDetection_U0_inData_TREADY );

    SC_METHOD(thread_outData_TDATA);
    sensitive << ( hlsDPI_dpi_U0_outData_TDATA );

    SC_METHOD(thread_outData_TLAST);
    sensitive << ( hlsDPI_dpi_U0_outData_TLAST );

    SC_METHOD(thread_outData_TSTRB);
    sensitive << ( hlsDPI_dpi_U0_outData_TSTRB );

    SC_METHOD(thread_outData_TUSER);
    sensitive << ( hlsDPI_dpi_U0_outData_TUSER );

    SC_METHOD(thread_outData_TVALID);
    sensitive << ( hlsDPI_dpi_U0_outData_TVALID );

    SC_METHOD(thread_parser2dpi_V_data_V_U_ap_dummy_ce);

    SC_METHOD(thread_parser2dpi_V_data_V_din);
    sensitive << ( hlsDPI_ethernetDetection_U0_parser2dpi_V_data_V_din );

    SC_METHOD(thread_parser2dpi_V_data_V_read);
    sensitive << ( hlsDPI_dpi_U0_parser2dpi_V_data_V_read );

    SC_METHOD(thread_parser2dpi_V_data_V_write);
    sensitive << ( hlsDPI_ethernetDetection_U0_parser2dpi_V_data_V_write );

    SC_METHOD(thread_parser2dpi_V_last_V_U_ap_dummy_ce);

    SC_METHOD(thread_parser2dpi_V_last_V_din);
    sensitive << ( hlsDPI_ethernetDetection_U0_parser2dpi_V_last_V_din );

    SC_METHOD(thread_parser2dpi_V_last_V_read);
    sensitive << ( hlsDPI_dpi_U0_parser2dpi_V_last_V_read );

    SC_METHOD(thread_parser2dpi_V_last_V_write);
    sensitive << ( hlsDPI_ethernetDetection_U0_parser2dpi_V_last_V_write );

    SC_METHOD(thread_parser2dpi_V_strb_V_U_ap_dummy_ce);

    SC_METHOD(thread_parser2dpi_V_strb_V_din);
    sensitive << ( hlsDPI_ethernetDetection_U0_parser2dpi_V_strb_V_din );

    SC_METHOD(thread_parser2dpi_V_strb_V_read);
    sensitive << ( hlsDPI_dpi_U0_parser2dpi_V_strb_V_read );

    SC_METHOD(thread_parser2dpi_V_strb_V_write);
    sensitive << ( hlsDPI_ethernetDetection_U0_parser2dpi_V_strb_V_write );

    SC_METHOD(thread_parser2dpi_V_user_V_U_ap_dummy_ce);

    SC_METHOD(thread_parser2dpi_V_user_V_din);
    sensitive << ( hlsDPI_ethernetDetection_U0_parser2dpi_V_user_V_din );

    SC_METHOD(thread_parser2dpi_V_user_V_read);
    sensitive << ( hlsDPI_dpi_U0_parser2dpi_V_user_V_read );

    SC_METHOD(thread_parser2dpi_V_user_V_write);
    sensitive << ( hlsDPI_ethernetDetection_U0_parser2dpi_V_user_V_write );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    hlsDPI_dpi_U0_ap_start = SC_LOGIC_0;
    ap_reg_procdone_hlsDPI_ethernetDetection_U0 = SC_LOGIC_0;
    ap_reg_procdone_hlsDPI_dpi_U0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "hlsDPI_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, inData_TDATA, "(port)inData_TDATA");
    sc_trace(mVcdFile, inData_TSTRB, "(port)inData_TSTRB");
    sc_trace(mVcdFile, inData_TUSER, "(port)inData_TUSER");
    sc_trace(mVcdFile, inData_TLAST, "(port)inData_TLAST");
    sc_trace(mVcdFile, outData_TDATA, "(port)outData_TDATA");
    sc_trace(mVcdFile, outData_TSTRB, "(port)outData_TSTRB");
    sc_trace(mVcdFile, outData_TUSER, "(port)outData_TUSER");
    sc_trace(mVcdFile, outData_TLAST, "(port)outData_TLAST");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, inData_TVALID, "(port)inData_TVALID");
    sc_trace(mVcdFile, inData_TREADY, "(port)inData_TREADY");
    sc_trace(mVcdFile, outData_TVALID, "(port)outData_TVALID");
    sc_trace(mVcdFile, outData_TREADY, "(port)outData_TREADY");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, hlsDPI_ethernetDetection_U0_ap_start, "hlsDPI_ethernetDetection_U0_ap_start");
    sc_trace(mVcdFile, hlsDPI_ethernetDetection_U0_ap_done, "hlsDPI_ethernetDetection_U0_ap_done");
    sc_trace(mVcdFile, hlsDPI_ethernetDetection_U0_ap_continue, "hlsDPI_ethernetDetection_U0_ap_continue");
    sc_trace(mVcdFile, hlsDPI_ethernetDetection_U0_ap_idle, "hlsDPI_ethernetDetection_U0_ap_idle");
    sc_trace(mVcdFile, hlsDPI_ethernetDetection_U0_ap_ready, "hlsDPI_ethernetDetection_U0_ap_ready");
    sc_trace(mVcdFile, hlsDPI_ethernetDetection_U0_inData_TVALID, "hlsDPI_ethernetDetection_U0_inData_TVALID");
    sc_trace(mVcdFile, hlsDPI_ethernetDetection_U0_inData_TDATA, "hlsDPI_ethernetDetection_U0_inData_TDATA");
    sc_trace(mVcdFile, hlsDPI_ethernetDetection_U0_inData_TREADY, "hlsDPI_ethernetDetection_U0_inData_TREADY");
    sc_trace(mVcdFile, hlsDPI_ethernetDetection_U0_inData_TSTRB, "hlsDPI_ethernetDetection_U0_inData_TSTRB");
    sc_trace(mVcdFile, hlsDPI_ethernetDetection_U0_inData_TUSER, "hlsDPI_ethernetDetection_U0_inData_TUSER");
    sc_trace(mVcdFile, hlsDPI_ethernetDetection_U0_inData_TLAST, "hlsDPI_ethernetDetection_U0_inData_TLAST");
    sc_trace(mVcdFile, hlsDPI_ethernetDetection_U0_parser2dpi_V_data_V_din, "hlsDPI_ethernetDetection_U0_parser2dpi_V_data_V_din");
    sc_trace(mVcdFile, hlsDPI_ethernetDetection_U0_parser2dpi_V_data_V_full_n, "hlsDPI_ethernetDetection_U0_parser2dpi_V_data_V_full_n");
    sc_trace(mVcdFile, hlsDPI_ethernetDetection_U0_parser2dpi_V_data_V_write, "hlsDPI_ethernetDetection_U0_parser2dpi_V_data_V_write");
    sc_trace(mVcdFile, hlsDPI_ethernetDetection_U0_parser2dpi_V_strb_V_din, "hlsDPI_ethernetDetection_U0_parser2dpi_V_strb_V_din");
    sc_trace(mVcdFile, hlsDPI_ethernetDetection_U0_parser2dpi_V_strb_V_full_n, "hlsDPI_ethernetDetection_U0_parser2dpi_V_strb_V_full_n");
    sc_trace(mVcdFile, hlsDPI_ethernetDetection_U0_parser2dpi_V_strb_V_write, "hlsDPI_ethernetDetection_U0_parser2dpi_V_strb_V_write");
    sc_trace(mVcdFile, hlsDPI_ethernetDetection_U0_parser2dpi_V_user_V_din, "hlsDPI_ethernetDetection_U0_parser2dpi_V_user_V_din");
    sc_trace(mVcdFile, hlsDPI_ethernetDetection_U0_parser2dpi_V_user_V_full_n, "hlsDPI_ethernetDetection_U0_parser2dpi_V_user_V_full_n");
    sc_trace(mVcdFile, hlsDPI_ethernetDetection_U0_parser2dpi_V_user_V_write, "hlsDPI_ethernetDetection_U0_parser2dpi_V_user_V_write");
    sc_trace(mVcdFile, hlsDPI_ethernetDetection_U0_parser2dpi_V_last_V_din, "hlsDPI_ethernetDetection_U0_parser2dpi_V_last_V_din");
    sc_trace(mVcdFile, hlsDPI_ethernetDetection_U0_parser2dpi_V_last_V_full_n, "hlsDPI_ethernetDetection_U0_parser2dpi_V_last_V_full_n");
    sc_trace(mVcdFile, hlsDPI_ethernetDetection_U0_parser2dpi_V_last_V_write, "hlsDPI_ethernetDetection_U0_parser2dpi_V_last_V_write");
    sc_trace(mVcdFile, hlsDPI_dpi_U0_ap_start, "hlsDPI_dpi_U0_ap_start");
    sc_trace(mVcdFile, hlsDPI_dpi_U0_ap_done, "hlsDPI_dpi_U0_ap_done");
    sc_trace(mVcdFile, hlsDPI_dpi_U0_ap_continue, "hlsDPI_dpi_U0_ap_continue");
    sc_trace(mVcdFile, hlsDPI_dpi_U0_ap_idle, "hlsDPI_dpi_U0_ap_idle");
    sc_trace(mVcdFile, hlsDPI_dpi_U0_ap_ready, "hlsDPI_dpi_U0_ap_ready");
    sc_trace(mVcdFile, hlsDPI_dpi_U0_outData_TREADY, "hlsDPI_dpi_U0_outData_TREADY");
    sc_trace(mVcdFile, hlsDPI_dpi_U0_outData_TDATA, "hlsDPI_dpi_U0_outData_TDATA");
    sc_trace(mVcdFile, hlsDPI_dpi_U0_outData_TVALID, "hlsDPI_dpi_U0_outData_TVALID");
    sc_trace(mVcdFile, hlsDPI_dpi_U0_outData_TSTRB, "hlsDPI_dpi_U0_outData_TSTRB");
    sc_trace(mVcdFile, hlsDPI_dpi_U0_outData_TUSER, "hlsDPI_dpi_U0_outData_TUSER");
    sc_trace(mVcdFile, hlsDPI_dpi_U0_outData_TLAST, "hlsDPI_dpi_U0_outData_TLAST");
    sc_trace(mVcdFile, hlsDPI_dpi_U0_parser2dpi_V_data_V_dout, "hlsDPI_dpi_U0_parser2dpi_V_data_V_dout");
    sc_trace(mVcdFile, hlsDPI_dpi_U0_parser2dpi_V_data_V_empty_n, "hlsDPI_dpi_U0_parser2dpi_V_data_V_empty_n");
    sc_trace(mVcdFile, hlsDPI_dpi_U0_parser2dpi_V_data_V_read, "hlsDPI_dpi_U0_parser2dpi_V_data_V_read");
    sc_trace(mVcdFile, hlsDPI_dpi_U0_parser2dpi_V_strb_V_dout, "hlsDPI_dpi_U0_parser2dpi_V_strb_V_dout");
    sc_trace(mVcdFile, hlsDPI_dpi_U0_parser2dpi_V_strb_V_empty_n, "hlsDPI_dpi_U0_parser2dpi_V_strb_V_empty_n");
    sc_trace(mVcdFile, hlsDPI_dpi_U0_parser2dpi_V_strb_V_read, "hlsDPI_dpi_U0_parser2dpi_V_strb_V_read");
    sc_trace(mVcdFile, hlsDPI_dpi_U0_parser2dpi_V_user_V_dout, "hlsDPI_dpi_U0_parser2dpi_V_user_V_dout");
    sc_trace(mVcdFile, hlsDPI_dpi_U0_parser2dpi_V_user_V_empty_n, "hlsDPI_dpi_U0_parser2dpi_V_user_V_empty_n");
    sc_trace(mVcdFile, hlsDPI_dpi_U0_parser2dpi_V_user_V_read, "hlsDPI_dpi_U0_parser2dpi_V_user_V_read");
    sc_trace(mVcdFile, hlsDPI_dpi_U0_parser2dpi_V_last_V_dout, "hlsDPI_dpi_U0_parser2dpi_V_last_V_dout");
    sc_trace(mVcdFile, hlsDPI_dpi_U0_parser2dpi_V_last_V_empty_n, "hlsDPI_dpi_U0_parser2dpi_V_last_V_empty_n");
    sc_trace(mVcdFile, hlsDPI_dpi_U0_parser2dpi_V_last_V_read, "hlsDPI_dpi_U0_parser2dpi_V_last_V_read");
    sc_trace(mVcdFile, ap_sig_hs_continue, "ap_sig_hs_continue");
    sc_trace(mVcdFile, parser2dpi_V_data_V_U_ap_dummy_ce, "parser2dpi_V_data_V_U_ap_dummy_ce");
    sc_trace(mVcdFile, parser2dpi_V_data_V_din, "parser2dpi_V_data_V_din");
    sc_trace(mVcdFile, parser2dpi_V_data_V_full_n, "parser2dpi_V_data_V_full_n");
    sc_trace(mVcdFile, parser2dpi_V_data_V_write, "parser2dpi_V_data_V_write");
    sc_trace(mVcdFile, parser2dpi_V_data_V_dout, "parser2dpi_V_data_V_dout");
    sc_trace(mVcdFile, parser2dpi_V_data_V_empty_n, "parser2dpi_V_data_V_empty_n");
    sc_trace(mVcdFile, parser2dpi_V_data_V_read, "parser2dpi_V_data_V_read");
    sc_trace(mVcdFile, parser2dpi_V_strb_V_U_ap_dummy_ce, "parser2dpi_V_strb_V_U_ap_dummy_ce");
    sc_trace(mVcdFile, parser2dpi_V_strb_V_din, "parser2dpi_V_strb_V_din");
    sc_trace(mVcdFile, parser2dpi_V_strb_V_full_n, "parser2dpi_V_strb_V_full_n");
    sc_trace(mVcdFile, parser2dpi_V_strb_V_write, "parser2dpi_V_strb_V_write");
    sc_trace(mVcdFile, parser2dpi_V_strb_V_dout, "parser2dpi_V_strb_V_dout");
    sc_trace(mVcdFile, parser2dpi_V_strb_V_empty_n, "parser2dpi_V_strb_V_empty_n");
    sc_trace(mVcdFile, parser2dpi_V_strb_V_read, "parser2dpi_V_strb_V_read");
    sc_trace(mVcdFile, parser2dpi_V_user_V_U_ap_dummy_ce, "parser2dpi_V_user_V_U_ap_dummy_ce");
    sc_trace(mVcdFile, parser2dpi_V_user_V_din, "parser2dpi_V_user_V_din");
    sc_trace(mVcdFile, parser2dpi_V_user_V_full_n, "parser2dpi_V_user_V_full_n");
    sc_trace(mVcdFile, parser2dpi_V_user_V_write, "parser2dpi_V_user_V_write");
    sc_trace(mVcdFile, parser2dpi_V_user_V_dout, "parser2dpi_V_user_V_dout");
    sc_trace(mVcdFile, parser2dpi_V_user_V_empty_n, "parser2dpi_V_user_V_empty_n");
    sc_trace(mVcdFile, parser2dpi_V_user_V_read, "parser2dpi_V_user_V_read");
    sc_trace(mVcdFile, parser2dpi_V_last_V_U_ap_dummy_ce, "parser2dpi_V_last_V_U_ap_dummy_ce");
    sc_trace(mVcdFile, parser2dpi_V_last_V_din, "parser2dpi_V_last_V_din");
    sc_trace(mVcdFile, parser2dpi_V_last_V_full_n, "parser2dpi_V_last_V_full_n");
    sc_trace(mVcdFile, parser2dpi_V_last_V_write, "parser2dpi_V_last_V_write");
    sc_trace(mVcdFile, parser2dpi_V_last_V_dout, "parser2dpi_V_last_V_dout");
    sc_trace(mVcdFile, parser2dpi_V_last_V_empty_n, "parser2dpi_V_last_V_empty_n");
    sc_trace(mVcdFile, parser2dpi_V_last_V_read, "parser2dpi_V_last_V_read");
    sc_trace(mVcdFile, ap_reg_procdone_hlsDPI_ethernetDetection_U0, "ap_reg_procdone_hlsDPI_ethernetDetection_U0");
    sc_trace(mVcdFile, ap_sig_hs_done, "ap_sig_hs_done");
    sc_trace(mVcdFile, ap_reg_procdone_hlsDPI_dpi_U0, "ap_reg_procdone_hlsDPI_dpi_U0");
    sc_trace(mVcdFile, ap_CS, "ap_CS");
    sc_trace(mVcdFile, ap_sig_top_allready, "ap_sig_top_allready");
#endif

    }
    mHdltvinHandle.open("hlsDPI.hdltvin.dat");
    mHdltvoutHandle.open("hlsDPI.hdltvout.dat");
}

hlsDPI::~hlsDPI() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete hlsDPI_ethernetDetection_U0;
    delete hlsDPI_dpi_U0;
    delete parser2dpi_V_data_V_U;
    delete parser2dpi_V_strb_V_U;
    delete parser2dpi_V_user_V_U;
    delete parser2dpi_V_last_V_U;
}

void hlsDPI::thread_ap_clk_no_reset_() {
    ap_CS = ap_const_logic_0;
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_procdone_hlsDPI_dpi_U0 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_hs_done.read())) {
            ap_reg_procdone_hlsDPI_dpi_U0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, hlsDPI_dpi_U0_ap_done.read())) {
            ap_reg_procdone_hlsDPI_dpi_U0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_procdone_hlsDPI_ethernetDetection_U0 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_hs_done.read())) {
            ap_reg_procdone_hlsDPI_ethernetDetection_U0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(hlsDPI_ethernetDetection_U0_ap_done.read(), ap_const_logic_1)) {
            ap_reg_procdone_hlsDPI_ethernetDetection_U0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        hlsDPI_dpi_U0_ap_start = ap_const_logic_0;
    } else {
        hlsDPI_dpi_U0_ap_start = ap_const_logic_1;
    }
}

void hlsDPI::thread_ap_done() {
    ap_done = ap_sig_hs_done.read();
}

void hlsDPI::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(hlsDPI_ethernetDetection_U0_ap_idle.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, hlsDPI_dpi_U0_ap_idle.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void hlsDPI::thread_ap_ready() {
    ap_ready = ap_sig_top_allready.read();
}

void hlsDPI::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void hlsDPI::thread_ap_sig_hs_continue() {
    ap_sig_hs_continue = ap_const_logic_1;
}

void hlsDPI::thread_ap_sig_hs_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, hlsDPI_dpi_U0_ap_done.read())) {
        ap_sig_hs_done = ap_const_logic_1;
    } else {
        ap_sig_hs_done = ap_const_logic_0;
    }
}

void hlsDPI::thread_ap_sig_top_allready() {
    ap_sig_top_allready = hlsDPI_ethernetDetection_U0_ap_ready.read();
}

void hlsDPI::thread_hlsDPI_dpi_U0_ap_continue() {
    hlsDPI_dpi_U0_ap_continue = ap_sig_hs_continue.read();
}

void hlsDPI::thread_hlsDPI_dpi_U0_outData_TREADY() {
    hlsDPI_dpi_U0_outData_TREADY = outData_TREADY.read();
}

void hlsDPI::thread_hlsDPI_dpi_U0_parser2dpi_V_data_V_dout() {
    hlsDPI_dpi_U0_parser2dpi_V_data_V_dout = parser2dpi_V_data_V_dout.read();
}

void hlsDPI::thread_hlsDPI_dpi_U0_parser2dpi_V_data_V_empty_n() {
    hlsDPI_dpi_U0_parser2dpi_V_data_V_empty_n = parser2dpi_V_data_V_empty_n.read();
}

void hlsDPI::thread_hlsDPI_dpi_U0_parser2dpi_V_last_V_dout() {
    hlsDPI_dpi_U0_parser2dpi_V_last_V_dout = parser2dpi_V_last_V_dout.read();
}

void hlsDPI::thread_hlsDPI_dpi_U0_parser2dpi_V_last_V_empty_n() {
    hlsDPI_dpi_U0_parser2dpi_V_last_V_empty_n = parser2dpi_V_last_V_empty_n.read();
}

void hlsDPI::thread_hlsDPI_dpi_U0_parser2dpi_V_strb_V_dout() {
    hlsDPI_dpi_U0_parser2dpi_V_strb_V_dout = parser2dpi_V_strb_V_dout.read();
}

void hlsDPI::thread_hlsDPI_dpi_U0_parser2dpi_V_strb_V_empty_n() {
    hlsDPI_dpi_U0_parser2dpi_V_strb_V_empty_n = parser2dpi_V_strb_V_empty_n.read();
}

void hlsDPI::thread_hlsDPI_dpi_U0_parser2dpi_V_user_V_dout() {
    hlsDPI_dpi_U0_parser2dpi_V_user_V_dout = parser2dpi_V_user_V_dout.read();
}

void hlsDPI::thread_hlsDPI_dpi_U0_parser2dpi_V_user_V_empty_n() {
    hlsDPI_dpi_U0_parser2dpi_V_user_V_empty_n = parser2dpi_V_user_V_empty_n.read();
}

void hlsDPI::thread_hlsDPI_ethernetDetection_U0_ap_continue() {
    hlsDPI_ethernetDetection_U0_ap_continue = ap_const_logic_1;
}

void hlsDPI::thread_hlsDPI_ethernetDetection_U0_ap_start() {
    hlsDPI_ethernetDetection_U0_ap_start = ap_start.read();
}

void hlsDPI::thread_hlsDPI_ethernetDetection_U0_inData_TDATA() {
    hlsDPI_ethernetDetection_U0_inData_TDATA = inData_TDATA.read();
}

void hlsDPI::thread_hlsDPI_ethernetDetection_U0_inData_TLAST() {
    hlsDPI_ethernetDetection_U0_inData_TLAST = inData_TLAST.read();
}

void hlsDPI::thread_hlsDPI_ethernetDetection_U0_inData_TSTRB() {
    hlsDPI_ethernetDetection_U0_inData_TSTRB = inData_TSTRB.read();
}

void hlsDPI::thread_hlsDPI_ethernetDetection_U0_inData_TUSER() {
    hlsDPI_ethernetDetection_U0_inData_TUSER = inData_TUSER.read();
}

void hlsDPI::thread_hlsDPI_ethernetDetection_U0_inData_TVALID() {
    hlsDPI_ethernetDetection_U0_inData_TVALID = inData_TVALID.read();
}

void hlsDPI::thread_hlsDPI_ethernetDetection_U0_parser2dpi_V_data_V_full_n() {
    hlsDPI_ethernetDetection_U0_parser2dpi_V_data_V_full_n = parser2dpi_V_data_V_full_n.read();
}

void hlsDPI::thread_hlsDPI_ethernetDetection_U0_parser2dpi_V_last_V_full_n() {
    hlsDPI_ethernetDetection_U0_parser2dpi_V_last_V_full_n = parser2dpi_V_last_V_full_n.read();
}

void hlsDPI::thread_hlsDPI_ethernetDetection_U0_parser2dpi_V_strb_V_full_n() {
    hlsDPI_ethernetDetection_U0_parser2dpi_V_strb_V_full_n = parser2dpi_V_strb_V_full_n.read();
}

void hlsDPI::thread_hlsDPI_ethernetDetection_U0_parser2dpi_V_user_V_full_n() {
    hlsDPI_ethernetDetection_U0_parser2dpi_V_user_V_full_n = parser2dpi_V_user_V_full_n.read();
}

void hlsDPI::thread_inData_TREADY() {
    inData_TREADY = hlsDPI_ethernetDetection_U0_inData_TREADY.read();
}

void hlsDPI::thread_outData_TDATA() {
    outData_TDATA = hlsDPI_dpi_U0_outData_TDATA.read();
}

void hlsDPI::thread_outData_TLAST() {
    outData_TLAST = hlsDPI_dpi_U0_outData_TLAST.read();
}

void hlsDPI::thread_outData_TSTRB() {
    outData_TSTRB = hlsDPI_dpi_U0_outData_TSTRB.read();
}

void hlsDPI::thread_outData_TUSER() {
    outData_TUSER = hlsDPI_dpi_U0_outData_TUSER.read();
}

void hlsDPI::thread_outData_TVALID() {
    outData_TVALID = hlsDPI_dpi_U0_outData_TVALID.read();
}

void hlsDPI::thread_parser2dpi_V_data_V_U_ap_dummy_ce() {
    parser2dpi_V_data_V_U_ap_dummy_ce = ap_const_logic_1;
}

void hlsDPI::thread_parser2dpi_V_data_V_din() {
    parser2dpi_V_data_V_din = hlsDPI_ethernetDetection_U0_parser2dpi_V_data_V_din.read();
}

void hlsDPI::thread_parser2dpi_V_data_V_read() {
    parser2dpi_V_data_V_read = hlsDPI_dpi_U0_parser2dpi_V_data_V_read.read();
}

void hlsDPI::thread_parser2dpi_V_data_V_write() {
    parser2dpi_V_data_V_write = hlsDPI_ethernetDetection_U0_parser2dpi_V_data_V_write.read();
}

void hlsDPI::thread_parser2dpi_V_last_V_U_ap_dummy_ce() {
    parser2dpi_V_last_V_U_ap_dummy_ce = ap_const_logic_1;
}

void hlsDPI::thread_parser2dpi_V_last_V_din() {
    parser2dpi_V_last_V_din = hlsDPI_ethernetDetection_U0_parser2dpi_V_last_V_din.read();
}

void hlsDPI::thread_parser2dpi_V_last_V_read() {
    parser2dpi_V_last_V_read = hlsDPI_dpi_U0_parser2dpi_V_last_V_read.read();
}

void hlsDPI::thread_parser2dpi_V_last_V_write() {
    parser2dpi_V_last_V_write = hlsDPI_ethernetDetection_U0_parser2dpi_V_last_V_write.read();
}

void hlsDPI::thread_parser2dpi_V_strb_V_U_ap_dummy_ce() {
    parser2dpi_V_strb_V_U_ap_dummy_ce = ap_const_logic_1;
}

void hlsDPI::thread_parser2dpi_V_strb_V_din() {
    parser2dpi_V_strb_V_din = hlsDPI_ethernetDetection_U0_parser2dpi_V_strb_V_din.read();
}

void hlsDPI::thread_parser2dpi_V_strb_V_read() {
    parser2dpi_V_strb_V_read = hlsDPI_dpi_U0_parser2dpi_V_strb_V_read.read();
}

void hlsDPI::thread_parser2dpi_V_strb_V_write() {
    parser2dpi_V_strb_V_write = hlsDPI_ethernetDetection_U0_parser2dpi_V_strb_V_write.read();
}

void hlsDPI::thread_parser2dpi_V_user_V_U_ap_dummy_ce() {
    parser2dpi_V_user_V_U_ap_dummy_ce = ap_const_logic_1;
}

void hlsDPI::thread_parser2dpi_V_user_V_din() {
    parser2dpi_V_user_V_din = hlsDPI_ethernetDetection_U0_parser2dpi_V_user_V_din.read();
}

void hlsDPI::thread_parser2dpi_V_user_V_read() {
    parser2dpi_V_user_V_read = hlsDPI_dpi_U0_parser2dpi_V_user_V_read.read();
}

void hlsDPI::thread_parser2dpi_V_user_V_write() {
    parser2dpi_V_user_V_write = hlsDPI_ethernetDetection_U0_parser2dpi_V_user_V_write.read();
}

void hlsDPI::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"inData_TDATA\" :  \"" << inData_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inData_TSTRB\" :  \"" << inData_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inData_TUSER\" :  \"" << inData_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inData_TLAST\" :  \"" << inData_TLAST.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"outData_TDATA\" :  \"" << outData_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outData_TSTRB\" :  \"" << outData_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outData_TUSER\" :  \"" << outData_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outData_TLAST\" :  \"" << outData_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inData_TVALID\" :  \"" << inData_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"inData_TREADY\" :  \"" << inData_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outData_TVALID\" :  \"" << outData_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"outData_TREADY\" :  \"" << outData_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

