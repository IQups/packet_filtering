-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.3
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hlsExample_lengthAdjust is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    macDetect2lengthCut_V_data_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    macDetect2lengthCut_V_data_V_empty_n : IN STD_LOGIC;
    macDetect2lengthCut_V_data_V_read : OUT STD_LOGIC;
    macDetect2lengthCut_V_strb_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    macDetect2lengthCut_V_strb_V_empty_n : IN STD_LOGIC;
    macDetect2lengthCut_V_strb_V_read : OUT STD_LOGIC;
    macDetect2lengthCut_V_user_V_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    macDetect2lengthCut_V_user_V_empty_n : IN STD_LOGIC;
    macDetect2lengthCut_V_user_V_read : OUT STD_LOGIC;
    macDetect2lengthCut_V_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    macDetect2lengthCut_V_last_V_empty_n : IN STD_LOGIC;
    macDetect2lengthCut_V_last_V_read : OUT STD_LOGIC;
    cutLength2ipDetect_V_data_V_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    cutLength2ipDetect_V_data_V_full_n : IN STD_LOGIC;
    cutLength2ipDetect_V_data_V_write : OUT STD_LOGIC;
    cutLength2ipDetect_V_strb_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    cutLength2ipDetect_V_strb_V_full_n : IN STD_LOGIC;
    cutLength2ipDetect_V_strb_V_write : OUT STD_LOGIC;
    cutLength2ipDetect_V_user_V_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    cutLength2ipDetect_V_user_V_full_n : IN STD_LOGIC;
    cutLength2ipDetect_V_user_V_write : OUT STD_LOGIC;
    cutLength2ipDetect_V_last_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    cutLength2ipDetect_V_last_V_full_n : IN STD_LOGIC;
    cutLength2ipDetect_V_last_V_write : OUT STD_LOGIC );
end;


architecture behav of hlsExample_lengthAdjust is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm0_0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_ST_st2_fsm1_1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_ST_st0_fsm1_0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv16_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_E : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001110";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm0 : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm0_0 : STD_LOGIC;
    signal ap_sig_bdd_23 : BOOLEAN;
    signal ap_CS_fsm1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding of ap_CS_fsm1 : signal is "none";
    signal ap_sig_cseq_ST_st0_fsm1_0 : STD_LOGIC;
    signal ap_sig_bdd_34 : BOOLEAN;
    signal macDetect2lengthCut_V_data_V0_status : STD_LOGIC;
    signal tmp_nbreadreq_fu_76_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_49 : BOOLEAN;
    signal cutLength2ipDetect_V_data_V1_status : STD_LOGIC;
    signal tmp_reg_295 : STD_LOGIC_VECTOR (0 downto 0);
    signal cutState_load_reg_322 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_bdd_77 : BOOLEAN;
    signal ap_sig_cseq_ST_st2_fsm1_1 : STD_LOGIC;
    signal ap_sig_bdd_83 : BOOLEAN;
    signal cutState : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal ih_totalLength_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal tmp_data_V_reg_299 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_strb_V_8_reg_304 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_reg_311 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_last_V_fu_163_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_316 : STD_LOGIC_VECTOR (0 downto 0);
    signal cutState_load_load_fu_167_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_fu_237_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_phiprechg_tmp_strb_V_reg_118pp0_it0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_phiprechg_tmp_strb_V_reg_118pp0_it1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_phiprechg_tmp_last_V_8_reg_130pp0_it0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_phiprechg_tmp_last_V_8_reg_130pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal macDetect2lengthCut_V_data_V0_update : STD_LOGIC;
    signal cutLength2ipDetect_V_data_V1_update : STD_LOGIC;
    signal tmp_s_fu_265_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal remainingLength_V_fu_187_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_197_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_12_fu_203_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_207_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_213_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_225_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_219_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_229_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_253_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_5_fu_243_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_s_fu_257_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm1 : STD_LOGIC_VECTOR (1 downto 0);


begin




    -- the current state (ap_CS_fsm0) of the state machine. --
    ap_CS_fsm0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm0 <= ap_ST_st1_fsm0_0;
            else
                ap_CS_fsm0 <= ap_NS_fsm0;
            end if;
        end if;
    end process;


    -- the current state (ap_CS_fsm1) of the state machine. --
    ap_CS_fsm1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm1 <= ap_ST_st0_fsm1_0;
            else
                ap_CS_fsm1 <= ap_NS_fsm1;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_77)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_phiprechg_tmp_last_V_8_reg_130pp0_it1 assign process. --
    ap_reg_phiprechg_tmp_last_V_8_reg_130pp0_it1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not((tmp_nbreadreq_fu_76_p6 = ap_const_lv1_0)) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_49 or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))) and (ap_const_lv3_3 = cutState_load_load_fu_167_p1) and (ap_const_lv1_0 = tmp_4_fu_175_p2) and (ap_const_lv1_0 = tmp_5_fu_191_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not((tmp_nbreadreq_fu_76_p6 = ap_const_lv1_0)) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_49 or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))) and (ap_const_lv3_3 = cutState_load_load_fu_167_p1) and (ap_const_lv1_0 = tmp_4_fu_175_p2) and not((ap_const_lv1_0 = tmp_5_fu_191_p2))))) then 
                ap_reg_phiprechg_tmp_last_V_8_reg_130pp0_it1 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not((tmp_nbreadreq_fu_76_p6 = ap_const_lv1_0)) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_49 or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))) and (ap_const_lv3_3 = cutState_load_load_fu_167_p1) and not((ap_const_lv1_0 = tmp_4_fu_175_p2)))) then 
                ap_reg_phiprechg_tmp_last_V_8_reg_130pp0_it1 <= macDetect2lengthCut_V_last_V_dout;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_49 or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))))) then 
                ap_reg_phiprechg_tmp_last_V_8_reg_130pp0_it1 <= ap_reg_phiprechg_tmp_last_V_8_reg_130pp0_it0;
            end if; 
        end if;
    end process;

    -- ap_reg_phiprechg_tmp_strb_V_reg_118pp0_it1 assign process. --
    ap_reg_phiprechg_tmp_strb_V_reg_118pp0_it1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not((tmp_nbreadreq_fu_76_p6 = ap_const_lv1_0)) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_49 or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))) and (ap_const_lv3_3 = cutState_load_load_fu_167_p1) and (ap_const_lv1_0 = tmp_4_fu_175_p2) and (ap_const_lv1_0 = tmp_5_fu_191_p2))) then 
                ap_reg_phiprechg_tmp_strb_V_reg_118pp0_it1 <= p_Result_1_fu_237_p2;
            elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not((tmp_nbreadreq_fu_76_p6 = ap_const_lv1_0)) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_49 or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))) and (ap_const_lv3_3 = cutState_load_load_fu_167_p1) and not((ap_const_lv1_0 = tmp_4_fu_175_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not((tmp_nbreadreq_fu_76_p6 = ap_const_lv1_0)) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_49 or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))) and (ap_const_lv3_3 = cutState_load_load_fu_167_p1) and (ap_const_lv1_0 = tmp_4_fu_175_p2) and not((ap_const_lv1_0 = tmp_5_fu_191_p2))))) then 
                ap_reg_phiprechg_tmp_strb_V_reg_118pp0_it1 <= macDetect2lengthCut_V_strb_V_dout;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_49 or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))))) then 
                ap_reg_phiprechg_tmp_strb_V_reg_118pp0_it1 <= ap_reg_phiprechg_tmp_strb_V_reg_118pp0_it0;
            end if; 
        end if;
    end process;

    -- cutState assign process. --
    cutState_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not((tmp_nbreadreq_fu_76_p6 = ap_const_lv1_0)) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_49 or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))) and (ap_const_lv3_0 = cutState_load_load_fu_167_p1))) then 
                cutState <= ap_const_lv3_1;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not((tmp_nbreadreq_fu_76_p6 = ap_const_lv1_0)) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_49 or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))) and (ap_const_lv3_1 = cutState_load_load_fu_167_p1))) then 
                cutState <= ap_const_lv3_2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not((tmp_nbreadreq_fu_76_p6 = ap_const_lv1_0)) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_49 or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))) and (ap_const_lv3_2 = cutState_load_load_fu_167_p1))) then 
                cutState <= ap_const_lv3_3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not((tmp_nbreadreq_fu_76_p6 = ap_const_lv1_0)) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_49 or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))) and (ap_const_lv3_3 = cutState_load_load_fu_167_p1) and (ap_const_lv1_0 = tmp_4_fu_175_p2) and (ap_const_lv1_0 = tmp_last_V_fu_163_p1))) then 
                cutState <= ap_const_lv3_4;
            elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not((tmp_nbreadreq_fu_76_p6 = ap_const_lv1_0)) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_49 or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))) and (cutState_load_load_fu_167_p1 = ap_const_lv3_4) and not((ap_const_lv1_0 = tmp_last_V_fu_163_p1))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not((tmp_nbreadreq_fu_76_p6 = ap_const_lv1_0)) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_49 or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))) and (ap_const_lv3_3 = cutState_load_load_fu_167_p1) and not((ap_const_lv1_0 = tmp_4_fu_175_p2)) and not((ap_const_lv1_0 = tmp_last_V_fu_163_p1))))) then 
                cutState <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not((tmp_nbreadreq_fu_76_p6 = ap_const_lv1_0)) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_49 or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))))) then
                cutState_load_reg_322 <= cutState;
                tmp_data_V_reg_299 <= macDetect2lengthCut_V_data_V_dout;
                tmp_last_V_reg_316 <= macDetect2lengthCut_V_last_V_dout;
                tmp_strb_V_8_reg_304 <= macDetect2lengthCut_V_strb_V_dout;
                tmp_user_V_reg_311 <= macDetect2lengthCut_V_user_V_dout;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not((tmp_nbreadreq_fu_76_p6 = ap_const_lv1_0)) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_49 or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))) and (ap_const_lv3_2 = cutState_load_load_fu_167_p1))) then
                ih_totalLength_V <= tmp_s_fu_265_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_49 or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))))) then
                tmp_reg_295 <= tmp_nbreadreq_fu_76_p6;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm1) of the state machine. --
    ap_NS_fsm1_assign_proc : process (ap_done_reg, ap_sig_cseq_ST_st1_fsm0_0, ap_CS_fsm1, ap_sig_bdd_49, ap_sig_bdd_77, ap_sig_cseq_ST_st2_fsm1_1)
    begin
        case ap_CS_fsm1 is
            when ap_ST_st2_fsm1_1 => 
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_77)) and not(ap_sig_bdd_49))) then
                    ap_NS_fsm1 <= ap_ST_st2_fsm1_1;
                elsif ((not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_77)) and (not((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and ap_sig_bdd_49)))) then
                    ap_NS_fsm1 <= ap_ST_st0_fsm1_0;
                else
                    ap_NS_fsm1 <= ap_ST_st2_fsm1_1;
                end if;
            when ap_ST_st0_fsm1_0 => 
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_49 or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))))) then
                    ap_NS_fsm1 <= ap_ST_st2_fsm1_1;
                else
                    ap_NS_fsm1 <= ap_ST_st0_fsm1_0;
                end if;
            when others =>  
                ap_NS_fsm1 <= "XX";
        end case;
    end process;

    -- the next state (ap_NS_fsm0) of the state machine. --
    ap_NS_fsm0_assign_proc : process (ap_done_reg, ap_CS_fsm0, ap_sig_bdd_49, ap_sig_bdd_77, ap_sig_cseq_ST_st2_fsm1_1)
    begin
        case ap_CS_fsm0 is
            when ap_ST_st1_fsm0_0 => 
                ap_NS_fsm0 <= ap_ST_st1_fsm0_0;
            when others =>  
                ap_NS_fsm0 <= "X";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_bdd_77, ap_sig_cseq_ST_st2_fsm1_1)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_77))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm0_0, ap_sig_cseq_ST_st0_fsm1_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and (ap_const_logic_1 = ap_sig_cseq_ST_st0_fsm1_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st1_fsm0_0, ap_sig_bdd_49, ap_sig_bdd_77, ap_sig_cseq_ST_st2_fsm1_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_49 or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_reg_phiprechg_tmp_last_V_8_reg_130pp0_it0 <= "X";
    ap_reg_phiprechg_tmp_strb_V_reg_118pp0_it0 <= "XXXXXXXX";

    -- ap_sig_bdd_23 assign process. --
    ap_sig_bdd_23_assign_proc : process(ap_CS_fsm0)
    begin
                ap_sig_bdd_23 <= (ap_CS_fsm0(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_34 assign process. --
    ap_sig_bdd_34_assign_proc : process(ap_CS_fsm1)
    begin
                ap_sig_bdd_34 <= (ap_const_lv1_1 = ap_CS_fsm1(0 downto 0));
    end process;


    -- ap_sig_bdd_49 assign process. --
    ap_sig_bdd_49_assign_proc : process(ap_start, ap_done_reg, macDetect2lengthCut_V_data_V0_status, tmp_nbreadreq_fu_76_p6)
    begin
                ap_sig_bdd_49 <= (((macDetect2lengthCut_V_data_V0_status = ap_const_logic_0) and not((tmp_nbreadreq_fu_76_p6 = ap_const_lv1_0))) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_77 assign process. --
    ap_sig_bdd_77_assign_proc : process(cutLength2ipDetect_V_data_V1_status, tmp_reg_295, cutState_load_reg_322)
    begin
                ap_sig_bdd_77 <= (((cutLength2ipDetect_V_data_V1_status = ap_const_logic_0) and not((ap_const_lv1_0 = tmp_reg_295)) and (cutState_load_reg_322 = ap_const_lv3_3)) or ((cutLength2ipDetect_V_data_V1_status = ap_const_logic_0) and not((ap_const_lv1_0 = tmp_reg_295)) and (cutState_load_reg_322 = ap_const_lv3_2)) or ((cutLength2ipDetect_V_data_V1_status = ap_const_logic_0) and not((ap_const_lv1_0 = tmp_reg_295)) and (cutState_load_reg_322 = ap_const_lv3_1)) or ((cutLength2ipDetect_V_data_V1_status = ap_const_logic_0) and not((ap_const_lv1_0 = tmp_reg_295)) and (cutState_load_reg_322 = ap_const_lv3_0)));
    end process;


    -- ap_sig_bdd_83 assign process. --
    ap_sig_bdd_83_assign_proc : process(ap_CS_fsm1)
    begin
                ap_sig_bdd_83 <= (ap_const_lv1_1 = ap_CS_fsm1(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_st0_fsm1_0 assign process. --
    ap_sig_cseq_ST_st0_fsm1_0_assign_proc : process(ap_sig_bdd_34)
    begin
        if (ap_sig_bdd_34) then 
            ap_sig_cseq_ST_st0_fsm1_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st0_fsm1_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm0_0 assign process. --
    ap_sig_cseq_ST_st1_fsm0_0_assign_proc : process(ap_sig_bdd_23)
    begin
        if (ap_sig_bdd_23) then 
            ap_sig_cseq_ST_st1_fsm0_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm0_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm1_1 assign process. --
    ap_sig_cseq_ST_st2_fsm1_1_assign_proc : process(ap_sig_bdd_83)
    begin
        if (ap_sig_bdd_83) then 
            ap_sig_cseq_ST_st2_fsm1_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm1_1 <= ap_const_logic_0;
        end if; 
    end process;

    cutLength2ipDetect_V_data_V1_status <= (cutLength2ipDetect_V_data_V_full_n and cutLength2ipDetect_V_strb_V_full_n and cutLength2ipDetect_V_user_V_full_n and cutLength2ipDetect_V_last_V_full_n);

    -- cutLength2ipDetect_V_data_V1_update assign process. --
    cutLength2ipDetect_V_data_V1_update_assign_proc : process(ap_done_reg, tmp_reg_295, cutState_load_reg_322, ap_sig_bdd_77, ap_sig_cseq_ST_st2_fsm1_1)
    begin
        if (((not((ap_const_lv1_0 = tmp_reg_295)) and (cutState_load_reg_322 = ap_const_lv3_3) and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_77))) or (not((ap_const_lv1_0 = tmp_reg_295)) and (cutState_load_reg_322 = ap_const_lv3_2) and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_77))) or (not((ap_const_lv1_0 = tmp_reg_295)) and (cutState_load_reg_322 = ap_const_lv3_1) and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_77))) or (not((ap_const_lv1_0 = tmp_reg_295)) and (cutState_load_reg_322 = ap_const_lv3_0) and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_77))))) then 
            cutLength2ipDetect_V_data_V1_update <= ap_const_logic_1;
        else 
            cutLength2ipDetect_V_data_V1_update <= ap_const_logic_0;
        end if; 
    end process;

    cutLength2ipDetect_V_data_V_din <= tmp_data_V_reg_299;
    cutLength2ipDetect_V_data_V_write <= cutLength2ipDetect_V_data_V1_update;

    -- cutLength2ipDetect_V_last_V_din assign process. --
    cutLength2ipDetect_V_last_V_din_assign_proc : process(ap_done_reg, tmp_reg_295, cutState_load_reg_322, ap_sig_bdd_77, ap_sig_cseq_ST_st2_fsm1_1, tmp_last_V_reg_316, ap_reg_phiprechg_tmp_last_V_8_reg_130pp0_it1)
    begin
        if (((not((ap_const_lv1_0 = tmp_reg_295)) and (cutState_load_reg_322 = ap_const_lv3_2) and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_77))) or (not((ap_const_lv1_0 = tmp_reg_295)) and (cutState_load_reg_322 = ap_const_lv3_1) and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_77))) or (not((ap_const_lv1_0 = tmp_reg_295)) and (cutState_load_reg_322 = ap_const_lv3_0) and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_77))))) then 
            cutLength2ipDetect_V_last_V_din <= tmp_last_V_reg_316;
        elsif ((not((ap_const_lv1_0 = tmp_reg_295)) and (cutState_load_reg_322 = ap_const_lv3_3) and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_77)))) then 
            cutLength2ipDetect_V_last_V_din <= ap_reg_phiprechg_tmp_last_V_8_reg_130pp0_it1;
        else 
            cutLength2ipDetect_V_last_V_din <= "X";
        end if; 
    end process;

    cutLength2ipDetect_V_last_V_write <= cutLength2ipDetect_V_data_V1_update;

    -- cutLength2ipDetect_V_strb_V_din assign process. --
    cutLength2ipDetect_V_strb_V_din_assign_proc : process(ap_done_reg, tmp_reg_295, cutState_load_reg_322, ap_sig_bdd_77, ap_sig_cseq_ST_st2_fsm1_1, tmp_strb_V_8_reg_304, ap_reg_phiprechg_tmp_strb_V_reg_118pp0_it1)
    begin
        if (((not((ap_const_lv1_0 = tmp_reg_295)) and (cutState_load_reg_322 = ap_const_lv3_2) and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_77))) or (not((ap_const_lv1_0 = tmp_reg_295)) and (cutState_load_reg_322 = ap_const_lv3_1) and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_77))) or (not((ap_const_lv1_0 = tmp_reg_295)) and (cutState_load_reg_322 = ap_const_lv3_0) and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_77))))) then 
            cutLength2ipDetect_V_strb_V_din <= tmp_strb_V_8_reg_304;
        elsif ((not((ap_const_lv1_0 = tmp_reg_295)) and (cutState_load_reg_322 = ap_const_lv3_3) and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_77)))) then 
            cutLength2ipDetect_V_strb_V_din <= ap_reg_phiprechg_tmp_strb_V_reg_118pp0_it1;
        else 
            cutLength2ipDetect_V_strb_V_din <= "XXXXXXXX";
        end if; 
    end process;

    cutLength2ipDetect_V_strb_V_write <= cutLength2ipDetect_V_data_V1_update;
    cutLength2ipDetect_V_user_V_din <= tmp_user_V_reg_311;
    cutLength2ipDetect_V_user_V_write <= cutLength2ipDetect_V_data_V1_update;
    cutState_load_load_fu_167_p1 <= cutState;
    macDetect2lengthCut_V_data_V0_status <= (macDetect2lengthCut_V_data_V_empty_n and macDetect2lengthCut_V_strb_V_empty_n and macDetect2lengthCut_V_user_V_empty_n and macDetect2lengthCut_V_last_V_empty_n);

    -- macDetect2lengthCut_V_data_V0_update assign process. --
    macDetect2lengthCut_V_data_V0_update_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st1_fsm0_0, tmp_nbreadreq_fu_76_p6, ap_sig_bdd_49, ap_sig_bdd_77, ap_sig_cseq_ST_st2_fsm1_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not((tmp_nbreadreq_fu_76_p6 = ap_const_lv1_0)) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_49 or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))))) then 
            macDetect2lengthCut_V_data_V0_update <= ap_const_logic_1;
        else 
            macDetect2lengthCut_V_data_V0_update <= ap_const_logic_0;
        end if; 
    end process;

    macDetect2lengthCut_V_data_V_read <= macDetect2lengthCut_V_data_V0_update;
    macDetect2lengthCut_V_last_V_read <= macDetect2lengthCut_V_data_V0_update;
    macDetect2lengthCut_V_strb_V_read <= macDetect2lengthCut_V_data_V0_update;
    macDetect2lengthCut_V_user_V_read <= macDetect2lengthCut_V_data_V0_update;
    p_Result_1_fu_237_p2 <= (tmp_15_fu_219_p2 or tmp_17_fu_229_p3);
    p_Result_5_fu_243_p4 <= macDetect2lengthCut_V_data_V_dout(15 downto 8);
    p_Result_s_fu_257_p3 <= (tmp_9_fu_253_p1 & p_Result_5_fu_243_p4);
    remainingLength_V_fu_187_p1 <= ih_totalLength_V(4 - 1 downto 0);
    tmp_11_fu_197_p2 <= std_logic_vector(signed(ap_const_lv4_8) - signed(remainingLength_V_fu_187_p1));
    tmp_12_fu_203_p1 <= std_logic_vector(resize(unsigned(tmp_11_fu_197_p2),8));
    tmp_13_fu_207_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & tmp_12_fu_203_p1(8-1 downto 0)))));
    tmp_14_fu_213_p2 <= (tmp_13_fu_207_p2 xor ap_const_lv8_FF);
    tmp_15_fu_219_p2 <= (macDetect2lengthCut_V_strb_V_dout and tmp_14_fu_213_p2);
    tmp_16_fu_225_p1 <= tmp_13_fu_207_p2(1 - 1 downto 0);
    tmp_17_fu_229_p3 <= (ap_const_lv7_0 & tmp_16_fu_225_p1);
    tmp_4_fu_175_p2 <= "1" when (unsigned(ih_totalLength_V) > unsigned(ap_const_lv16_8)) else "0";
    tmp_5_fu_191_p2 <= "1" when (remainingLength_V_fu_187_p1 = ap_const_lv4_0) else "0";
    tmp_9_fu_253_p1 <= macDetect2lengthCut_V_data_V_dout(8 - 1 downto 0);
    tmp_last_V_fu_163_p1 <= macDetect2lengthCut_V_last_V_dout;
    tmp_nbreadreq_fu_76_p6 <= (0=>(macDetect2lengthCut_V_data_V_empty_n and macDetect2lengthCut_V_strb_V_empty_n and macDetect2lengthCut_V_user_V_empty_n and macDetect2lengthCut_V_last_V_empty_n), others=>'-');
    tmp_s_fu_265_p2 <= std_logic_vector(unsigned(ap_const_lv16_E) + unsigned(p_Result_s_fu_257_p3));
end behav;
