-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.3
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hlsExample_loopback307 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    parser2loopback_V_data_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    parser2loopback_V_data_V_empty_n : IN STD_LOGIC;
    parser2loopback_V_data_V_read : OUT STD_LOGIC;
    parser2loopback_V_strb_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    parser2loopback_V_strb_V_empty_n : IN STD_LOGIC;
    parser2loopback_V_strb_V_read : OUT STD_LOGIC;
    parser2loopback_V_user_V_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    parser2loopback_V_user_V_empty_n : IN STD_LOGIC;
    parser2loopback_V_user_V_read : OUT STD_LOGIC;
    parser2loopback_V_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    parser2loopback_V_last_V_empty_n : IN STD_LOGIC;
    parser2loopback_V_last_V_read : OUT STD_LOGIC;
    mod2merge_V_data_V_2_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    mod2merge_V_data_V_2_full_n : IN STD_LOGIC;
    mod2merge_V_data_V_2_write : OUT STD_LOGIC;
    mod2merge_V_strb_V_2_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    mod2merge_V_strb_V_2_full_n : IN STD_LOGIC;
    mod2merge_V_strb_V_2_write : OUT STD_LOGIC;
    mod2merge_V_user_V_2_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    mod2merge_V_user_V_2_full_n : IN STD_LOGIC;
    mod2merge_V_user_V_2_write : OUT STD_LOGIC;
    mod2merge_V_last_V_2_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    mod2merge_V_last_V_2_full_n : IN STD_LOGIC;
    mod2merge_V_last_V_2_write : OUT STD_LOGIC );
end;


architecture behav of hlsExample_loopback307 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm0_0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_ST_st2_fsm1_1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_ST_st0_fsm1_0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm0 : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm0_0 : STD_LOGIC;
    signal ap_sig_bdd_23 : BOOLEAN;
    signal ap_CS_fsm1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding of ap_CS_fsm1 : signal is "none";
    signal ap_sig_cseq_ST_st0_fsm1_0 : STD_LOGIC;
    signal ap_sig_bdd_34 : BOOLEAN;
    signal parser2loopback_V_data_V0_status : STD_LOGIC;
    signal tmp_nbreadreq_fu_38_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_49 : BOOLEAN;
    signal mod2merge_V_data_V_21_status : STD_LOGIC;
    signal tmp_reg_96 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_57 : BOOLEAN;
    signal ap_sig_cseq_ST_st2_fsm1_1 : STD_LOGIC;
    signal ap_sig_bdd_63 : BOOLEAN;
    signal tmp_data_V_4_reg_100 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_strb_V_reg_105 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_reg_110 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_last_V_reg_115 : STD_LOGIC_VECTOR (0 downto 0);
    signal parser2loopback_V_data_V0_update : STD_LOGIC;
    signal mod2merge_V_data_V_21_update : STD_LOGIC;
    signal ap_NS_fsm0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm1 : STD_LOGIC_VECTOR (1 downto 0);


begin




    -- the current state (ap_CS_fsm0) of the state machine. --
    ap_CS_fsm0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm0 <= ap_ST_st1_fsm0_0;
            else
                ap_CS_fsm0 <= ap_NS_fsm0;
            end if;
        end if;
    end process;


    -- the current state (ap_CS_fsm1) of the state machine. --
    ap_CS_fsm1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm1 <= ap_ST_st0_fsm1_0;
            else
                ap_CS_fsm1 <= ap_NS_fsm1;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_57)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not((tmp_nbreadreq_fu_38_p6 = ap_const_lv1_0)) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_49 or (ap_sig_bdd_57 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))))) then
                tmp_data_V_4_reg_100 <= parser2loopback_V_data_V_dout;
                tmp_last_V_reg_115 <= parser2loopback_V_last_V_dout;
                tmp_strb_V_reg_105 <= parser2loopback_V_strb_V_dout;
                tmp_user_V_reg_110 <= parser2loopback_V_user_V_dout;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_49 or (ap_sig_bdd_57 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))))) then
                tmp_reg_96 <= tmp_nbreadreq_fu_38_p6;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm1) of the state machine. --
    ap_NS_fsm1_assign_proc : process (ap_done_reg, ap_sig_cseq_ST_st1_fsm0_0, ap_CS_fsm1, ap_sig_bdd_49, ap_sig_bdd_57, ap_sig_cseq_ST_st2_fsm1_1)
    begin
        case ap_CS_fsm1 is
            when ap_ST_st2_fsm1_1 => 
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_57)) and not(ap_sig_bdd_49))) then
                    ap_NS_fsm1 <= ap_ST_st2_fsm1_1;
                elsif ((not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_57)) and (not((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and ap_sig_bdd_49)))) then
                    ap_NS_fsm1 <= ap_ST_st0_fsm1_0;
                else
                    ap_NS_fsm1 <= ap_ST_st2_fsm1_1;
                end if;
            when ap_ST_st0_fsm1_0 => 
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_49 or (ap_sig_bdd_57 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))))) then
                    ap_NS_fsm1 <= ap_ST_st2_fsm1_1;
                else
                    ap_NS_fsm1 <= ap_ST_st0_fsm1_0;
                end if;
            when others =>  
                ap_NS_fsm1 <= "XX";
        end case;
    end process;

    -- the next state (ap_NS_fsm0) of the state machine. --
    ap_NS_fsm0_assign_proc : process (ap_done_reg, ap_CS_fsm0, ap_sig_bdd_49, ap_sig_bdd_57, ap_sig_cseq_ST_st2_fsm1_1)
    begin
        case ap_CS_fsm0 is
            when ap_ST_st1_fsm0_0 => 
                ap_NS_fsm0 <= ap_ST_st1_fsm0_0;
            when others =>  
                ap_NS_fsm0 <= "X";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_bdd_57, ap_sig_cseq_ST_st2_fsm1_1)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_57))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm0_0, ap_sig_cseq_ST_st0_fsm1_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and (ap_const_logic_1 = ap_sig_cseq_ST_st0_fsm1_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st1_fsm0_0, ap_sig_bdd_49, ap_sig_bdd_57, ap_sig_cseq_ST_st2_fsm1_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_49 or (ap_sig_bdd_57 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_23 assign process. --
    ap_sig_bdd_23_assign_proc : process(ap_CS_fsm0)
    begin
                ap_sig_bdd_23 <= (ap_CS_fsm0(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_34 assign process. --
    ap_sig_bdd_34_assign_proc : process(ap_CS_fsm1)
    begin
                ap_sig_bdd_34 <= (ap_const_lv1_1 = ap_CS_fsm1(0 downto 0));
    end process;


    -- ap_sig_bdd_49 assign process. --
    ap_sig_bdd_49_assign_proc : process(ap_start, ap_done_reg, parser2loopback_V_data_V0_status, tmp_nbreadreq_fu_38_p6)
    begin
                ap_sig_bdd_49 <= (((parser2loopback_V_data_V0_status = ap_const_logic_0) and not((tmp_nbreadreq_fu_38_p6 = ap_const_lv1_0))) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_57 assign process. --
    ap_sig_bdd_57_assign_proc : process(mod2merge_V_data_V_21_status, tmp_reg_96)
    begin
                ap_sig_bdd_57 <= ((mod2merge_V_data_V_21_status = ap_const_logic_0) and not((ap_const_lv1_0 = tmp_reg_96)));
    end process;


    -- ap_sig_bdd_63 assign process. --
    ap_sig_bdd_63_assign_proc : process(ap_CS_fsm1)
    begin
                ap_sig_bdd_63 <= (ap_const_lv1_1 = ap_CS_fsm1(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_st0_fsm1_0 assign process. --
    ap_sig_cseq_ST_st0_fsm1_0_assign_proc : process(ap_sig_bdd_34)
    begin
        if (ap_sig_bdd_34) then 
            ap_sig_cseq_ST_st0_fsm1_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st0_fsm1_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm0_0 assign process. --
    ap_sig_cseq_ST_st1_fsm0_0_assign_proc : process(ap_sig_bdd_23)
    begin
        if (ap_sig_bdd_23) then 
            ap_sig_cseq_ST_st1_fsm0_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm0_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm1_1 assign process. --
    ap_sig_cseq_ST_st2_fsm1_1_assign_proc : process(ap_sig_bdd_63)
    begin
        if (ap_sig_bdd_63) then 
            ap_sig_cseq_ST_st2_fsm1_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm1_1 <= ap_const_logic_0;
        end if; 
    end process;

    mod2merge_V_data_V_21_status <= (mod2merge_V_data_V_2_full_n and mod2merge_V_strb_V_2_full_n and mod2merge_V_user_V_2_full_n and mod2merge_V_last_V_2_full_n);

    -- mod2merge_V_data_V_21_update assign process. --
    mod2merge_V_data_V_21_update_assign_proc : process(ap_done_reg, tmp_reg_96, ap_sig_bdd_57, ap_sig_cseq_ST_st2_fsm1_1)
    begin
        if ((not((ap_const_lv1_0 = tmp_reg_96)) and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_57)))) then 
            mod2merge_V_data_V_21_update <= ap_const_logic_1;
        else 
            mod2merge_V_data_V_21_update <= ap_const_logic_0;
        end if; 
    end process;

    mod2merge_V_data_V_2_din <= tmp_data_V_4_reg_100;
    mod2merge_V_data_V_2_write <= mod2merge_V_data_V_21_update;
    mod2merge_V_last_V_2_din <= tmp_last_V_reg_115;
    mod2merge_V_last_V_2_write <= mod2merge_V_data_V_21_update;
    mod2merge_V_strb_V_2_din <= tmp_strb_V_reg_105;
    mod2merge_V_strb_V_2_write <= mod2merge_V_data_V_21_update;
    mod2merge_V_user_V_2_din <= tmp_user_V_reg_110;
    mod2merge_V_user_V_2_write <= mod2merge_V_data_V_21_update;
    parser2loopback_V_data_V0_status <= (parser2loopback_V_data_V_empty_n and parser2loopback_V_strb_V_empty_n and parser2loopback_V_user_V_empty_n and parser2loopback_V_last_V_empty_n);

    -- parser2loopback_V_data_V0_update assign process. --
    parser2loopback_V_data_V0_update_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st1_fsm0_0, tmp_nbreadreq_fu_38_p6, ap_sig_bdd_49, ap_sig_bdd_57, ap_sig_cseq_ST_st2_fsm1_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not((tmp_nbreadreq_fu_38_p6 = ap_const_lv1_0)) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_49 or (ap_sig_bdd_57 and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))))) then 
            parser2loopback_V_data_V0_update <= ap_const_logic_1;
        else 
            parser2loopback_V_data_V0_update <= ap_const_logic_0;
        end if; 
    end process;

    parser2loopback_V_data_V_read <= parser2loopback_V_data_V0_update;
    parser2loopback_V_last_V_read <= parser2loopback_V_data_V0_update;
    parser2loopback_V_strb_V_read <= parser2loopback_V_data_V0_update;
    parser2loopback_V_user_V_read <= parser2loopback_V_data_V0_update;
    tmp_nbreadreq_fu_38_p6 <= (0=>(parser2loopback_V_data_V_empty_n and parser2loopback_V_strb_V_empty_n and parser2loopback_V_user_V_empty_n and parser2loopback_V_last_V_empty_n), others=>'-');
end behav;
